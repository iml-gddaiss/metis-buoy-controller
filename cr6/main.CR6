'Date: 04 avril 2023
'Program author: Anthony Ouellet
'Installed in the buoy, pre-deployment

SequentialMode
AngleDegrees
PreserveVariables

'Tower instruments
'#T1 Anemometer WMT700
'#T2 Weather station WMXT536
'#T3 Compass DCM260B
'#T4 GPS 19xHVS
'#T5 PAR
'#T6 HyperOCR_I

'Well instruments
'#W1 CTD SBE37 w/ Pump SBE05
'#W2 SeaFet
'#W3 ECO-Triplet
'#W4 SUNA
'#W5 PCO2
'#W6 Flowmeter
'#W7 HyperOCR_R

'Miscellaneous instruments
'#M1 Wave monitor
'#M2 Water detection
'#M3 Power controller
'#M4 ADCP
'#M5 Winch

Public WhereAmI As String
Public TAGString As String * 200
Dim Well_Switch As Boolean
Dim Tower_Switch As Boolean
Dim Timer_Value(9) As Long : Alias Timer_Value = Weather_Timer, GPS_Timer, Well_Timer, Triplet_Timer, SUNA_Timer, RainReset_Timer, Tower_Timer
Dim NBR 'NBytesReturned
Dim Buoy_Time(9) : Alias Buoy_Time = Buoy_Year, Buoy_Month, Buoy_Date, Buoy_Hour, Buoy_Minute, Buoy_Second, Buoy_Millisecond, Buoy_DayofWeek, Buoy_DayofYear
Public ScanDateTime As String

Dim TAGFile As Long
Dim WinchFile As Long
Dim ToTransmit As Long

Dim SerialPort

'COMPort Tower
Const SerialTower = 32 'RS485 As WMT700(A), WXT536(2) & Compass(1)
' Const SerialPAR = 33 'RS232
' Const SerialOCRI = 34
' Const Available = 35
' Const SerialGPS = 16 'U11-U12 (trouble with GPS on SDM)

'COMPort Well
Const SerialSBE37 = 36 'RS232
Const SerialTriplet = 37 'RS232
Const SerialSeafet = 38 'RS232
Const SerialOCRR = 39 'RS232
Const SerialPCO2 = 40 'RS232
'Const SerialSUNA = 41 'RS232
'Const Available = 42
'Const Available = 43
'Const SerialFlow = 14 'U7-U8


'COMPort Miscellaneous
'Const Available = 44
' Const SerialPower = 45 'RS485
' Const SerialWave = 46 'RS232
' Const WD_Channel = U1 'Voltage reading
' Const SerialADCP = 12 'U3-U4 ' Move to adcp.CR6
' Const SerialWinch = 13 'U5-U6

Const Yes = True
Const No = False

'Instruments state

ConstTable (Buoy_Config,0)
Const Buoy_Name = "PMZA-RIKI" 
Const Buoy_Interval = 30
Const PCO2_Interval = 12
Const Winch_Interval = 5
Const Depth_for_Winch = 210 

Const Instrument_installed = "As Follow" 
Const With_GPS = 1
Const With_WMT700 = 1
Const With_WXT536 = 1
Const With_Compass = 1
Const With_PAR = 1
Const With_OCR_I = 1

Const With_SBE37 = 1
Const With_Seafet = 1
Const With_Triplet = 1
Const With_SUNA = 1
Const With_PCO2 = 1
Const With_OCR_R = 1

Const With_Wave = 1
Const With_ADCP = 1
Const With_Winch = 1
Const With_WD_Main = 1
Const With_Power = 1

Const Buoy_Config = "As Follow" 
Const Bypass_Salinity = 0
Const Disable_Pump = 0 
Const Seafet_Auto_Correction = -1 
EndConstTable


Public Manual_Tower_Switch = false
Public Manual_Well_Switch = false

Public Send_Break_to_ADCP = false

'###### DECLARING INSUTRMENTS #####

Include "CPU:wmt700.cr6"                    '#T1 Declare WMT700
Include "CPU:wtx536.cr6"                    '#T2 Declare WMT536
Include "CPU:compass.cr6"                   '#T3 Declare Compass
Include "CPU:gps.cr6"                       '#T4 Declare GPS
Include "CPU:par.cr6"                       '#T5 Declare PAR
Include "CPU:ocri.cr6"                      '#T6 Declare HyperOCR_I 
Include "CPU:sbe37.cr6"                     '#W1 Declare CTD SBE37 
Include "CPU:eco_triplet.cr6"               '#W2 Declare ECO-Triplet
Include "CPU:seafet.cr6"                    '#W3 Declare Seafet 
Include "CPU:suna.cr6"                      '#W4 Declare SUNA 
Include "CPU:pco2.cr6"                      '#W5 PCO2
'#W6 Flowmeter Todo ? Useless ?
Include "CPU:hyper_ocr_r.cr6"               '#W7 HyperOCR_R 
Include "CPU:wave_monitor.cr6"              '#M1 Wave_Monitor 
Include "CPU:water_detection_main.cr6"      '#M2 Water_Detection_Main 
Include "CPU:power_controller.cr6"          '#M3 Power Controller
Include "CPU:adcp.cr6"                      '#M4 ADCP 
Include "CPU:winch.cr6"                     '#M5 Winch 

'####### Different processing past this point #######

'Wind compensation by Compass and GPS

Dim WindTAG As String
Dim Wind_Dir_Vec(6) As Float : Alias Wind_Dir_Vec = Dir_Min_x, Dir_Min_y, Dir_Ave_x, Dir_Ave_y, Dir_Max_x, Dir_Max_y
Dim Wind_Spd_Vec(6) As Float : Alias Wind_Spd_Vec = Spd_Min_x, Spd_Min_y, Spd_Ave_x, Spd_Ave_y, Spd_Max_x, Spd_Max_y
Dim Buoy_Direction_Vector(2) As Float : Alias Buoy_Direction_Vector = Buoy_SOG_x, Buoy_SOG_y


' Weather manipulation with selection of better wind and compensation

Dim Wind(6) As Float : Alias Wind = Wind_Dir_Min, Wind_Dir_Ave, Wind_Dir_Max, Wind_Spd_Min, Wind_Spd_Ave, Wind_Spd_Max
Units Wind_Dir_Min = °
Units Wind_Dir_Ave = °
Units Wind_Dir_Max = °
Units Wind_Spd_Min = Kn
Units Wind_Spd_Ave = Kn
Units Wind_Spd_Max = Kn

DataTable (Weather,1,-1)
  DataInterval (0,0,Sec,10)
  Sample (1,Air_Temp,IEEE4)
  Sample (1,Air_Humidity,IEEE4)
  Sample (1,Air_Pressure,IEEE4)
  Sample (1,Wind_Dir_Min,IEEE4)
  Sample (1,Wind_Dir_Ave,IEEE4)
  Sample (1,Wind_Dir_Max,IEEE4)
  Sample (1,Wind_Spd_Min,IEEE4)
  Sample (1,Wind_Spd_Ave,IEEE4)
  Sample (1,Wind_Spd_Max,IEEE4)
  Sample (1,Rain_Total,IEEE4)
  Sample (1,Rain_Duration,IEEE4)
  Sample (1,Rain_Intensity,IEEE4)
  Sample (1,Hail_Total,IEEE4)
  Sample (1,Hail_Duration,IEEE4)
  Sample (1,Hail_Intensity,IEEE4)
  EndTable


' Raw data from the instruments

DataTable (Raw,1,-1)
  DataInterval(0,0,Sec,10)
  Sample (1,RawR1_Wind,String)
  Sample (1,RawR2_Weather,String)
  Sample (1,RawR3_Rain,String)
  Sample (1,RawWMT700,String)
  Sample (1,RawGPS,String)
  Sample (1,RawPAR,String)  
  Sample (1,RawWave,String)
  Sample (1,RawPower,String)
  Sample (1,RawSBE37,String)
  Sample (1,RawTriplet,String)
  Sample (1,RawSeafet,String)  
  Sample (1,RawSUNADark,String)
  Sample (1,RawSUNALight,String)
  Sample (1,RawPCO2_Water,String)
  Sample (1,RawPCO2_Air,String)
  Sample (1,WinchMessage,String)
EndTable
 

'------------------------------------------------------------------------------
'----------------------------- Main Program -----------------------------------
'------------------------------------------------------------------------------

''' Start sampling '''
'Close unused SerialPort on SDM
'Open 5V for the Water_Detection_Main
'Start Weather sensor
'Collect SBE37 to verify there's salt water -> Start pump
'Collect GPS data
'Start Triplet
'Start Flowmeter (not yet done)
'Collect Compass (60 samples / 2Hz)
'Collect Flowmeter (not yet done)
'Collect Water_Detection_Main
'Collect Power
'Collect ADCP (not yet done)
'Collect Triplet

''' After pump running min. 30sec '''
'Start SUNA
'Collect SBE37
'Collect Seafet
'Collect SUNA

''' After the weather station collected for min. 61sec '''
'Collect PAR
'Collect Weather (WMT700 & WXT536)
'Collect OCR ?

''' Before ending scan '''
'Collect Wave
'Collect PCO2 / Start sample / Delay sample
'Collect Winch / Start Winch / Delay Winch

''' Send data and End Scan '''


BeginProg
  'This is turning the Wifi Off
  SetSetting("WIFIconfig",4)

  Call CloseCR6SerialPorts
      
  Call CloseSDM4SerialPorts

  Call StartADCP        
  
  Scan(Buoy_Interval,Min,0,0)
  ScanDateTime = Public.TimeStamp(4,0)
  WhereAmI = "Initializing instrument"
    
  Call StartWaterDetectionSensor
      
  'Starting the weather instrument as soon as possible to stabilize the OCR, start the PAR sample and initialize the WMT700
  Call StartWeatherInstruments

    
'GPS (T4) --------------------------------------------------------------------
  WhereAmI = "Start GPS"
  If With_GPS <> 0 Then
    
    Call SampleGPS

    CallTable FileGPS  
  
  EndIf
  WhereAmI = "EndGPS, start Start Tower"


'WXT536 (T2) Start sampling ---------------------------------------------------
  If With_WXT536 <> 0 Then
    
    Call SampleWXT536
  
  EndIf 'With_WXT536


  If With_WMT700 <> 0 Then
    Tower_Timer = Timer(7,Sec,4)
    If Tower_Timer < 8 Then
      Delay(1,8-Tower_Timer,Sec)
    EndIf
    SerialOut(SerialTower,"$Ameas,1"&CHR(10),"",1,0)
  EndIf
    
  'Start Timer#1 to collect data in 61sec
  If With_WXT536 <> 0 OR With_WMT700 <> 0 OR With_PAR <> 0 Then
    Timer(1,Sec,0)
  EndIf



'CTD SBE37 (W1) in salt water to start pump -----------------------------------
'Rewrite security so it won't try to sample the CTD if Bypass_Salinity or Disable_Pump are True

    If With_SBE37 <> 0 Then
      RawSBE37_SalinityTest = ""
      SBE37() = 0
      SerialOpen(SerialSBE37,19200,3,20,50) 'CTD string is around 35 char.
      For X = 1 To 3 Step 1
        SerialOut(SerialSBE37,CHR(13),"S>",1,50)
        SerialOut(SerialSBE37,"ts"&CHR(13)," ",1,400)
        SerialIn(RawSBE37_SalinityTest,SerialSBE37,300,CHR(83),40) 
        SplitStr(SBE37,RawSBE37_SalinityTest,",",4,0)
        If Salinity > 10 AND Len(RawSBE37_SalinityTest) = 39 Then
          ExitFor
        EndIf
      Next X
      
      EndIf 'With_SBE37
      
    If (Salinity > 10 OR Bypass_Salinity = Yes) AND (((With_SBE37 <> 0 OR With_Seafet <> 0 OR With_SUNA <> 0) AND Disable_Pump = No) OR With_OCR_R <> 0) Then
     'Open Switch #2 to control pump for X sec
      SW12(SW12_2,1)
      Well_Switch = True
      Timer(3,Sec,0) 'Start timer #3 for the pump working for min. 30 sec
    EndIf
 
      
'ECO-Triplet/w (W3) Start sample ----------------------------------------------
    RawTriplet = ""
    If With_Triplet <> 0 Then
      WhereAmI = "Start Triplet"
      SerialFlush(SerialTriplet)
      SerialOpen(SerialTriplet,19200,3,20,500) 'Triplet string is around 100 char.
      SerialOut(SerialTriplet,CHR(13)&CHR(10),0,2,100)
      SerialOut(SerialTriplet,"!!!!!!!!","Mem",1,600)
      SerialOut(SerialTriplet,"$run"&CHR(13),0,1,10)
      Timer(4,Sec,0) 'Timer#4 Start for Triplet sampling
      EndIf

'Flowmeter (W6) Start sample --------------------------------------------------


'Compass (T3) -----------------------------------------------------------------
	  ASCIIString = ""
    If With_Compass <> 0 Then
      Tower_Timer = Timer(7,Sec,4)
      If Tower_Timer < 4 Then
        Delay(1,4-Tower_Timer,Sec)
      EndIf

      WhereAmI = "Start Compass"
     'Resetting the compass & Heading values
      Compass() = 0 'Compass(3) = Heading, Pitch, Roll
      Heading_Vec() = 0 'Heading_Vec(2) = Heading_x, Heading_y
      SerialOut(SerialTower,"h"&CHR(04)&CHR(01)&CHR(04)&CHR(09),"h",3,50)
      For Y = 1 To 60
        SerialOut(SerialTower,"h"&CHR(04)&CHR(01)&CHR(04)&CHR(09),"h",1,50)  ' Command = h^D^A^D^I (68 04 01 04 09)
        SerialInRecord(SerialTower,ASCIIString,&H68,13,0,NBR,101)   ' First byte sent is address 68
        
        If ASCIIString = "NAN" Then
          Pitch = "NAN"
          Roll = "NAN"
          Heading = "NAN"
          ExitFor
          EndIf        

        For X = 4 To 12                                      ' Setting each HEX byte in RawCompass Array
          RawCompass(X-3) = Hex(ASCII(ASCIIString(1,1,X)))   ' Received message looks like 68 0D 01 84 00 11 22 10 33 44 05 66 77 99
          Next X                                             '                             ID LG AD MS (- Roll) (+Pitch) ( Head ) CHK
        
        ' Changing the first pitch/roll byte for positive or negative  
        If RawCompass(1) = 10 Then 
          RawCompass(1) = "+"
          Else
            RawCompass(1) = "-" 
            EndIf
        If RawCompass(4) = 10 Then
          RawCompass(4) = "+"
          Else
            RawCompass(4) = "-"
            EndIf
            
        If Len(RawCompass(8)) = 1 Then
          RawCompass(8) = "0" + RawCompass(8)
        EndIf

        'Array are in order of Roll, Pitch & Heading
    	  Roll = Roll + CTYPE(RawCompass(1)&RawCompass(2)&"."&RawCompass(3),Float)
    	  Pitch = Pitch + CTYPE(RawCompass(4)&RawCompass(5)&"."&RawCompass(6),Float)
    	  Heading = CTYPE(RawCompass(7)&RawCompass(8)&"."&RawCompass(9),Float)
    	  Heading_x = Heading_x + COS(Heading)
    	  Heading_y = Heading_y + SIN(Heading)
    	  Delay(1,400,mSec)
    	  
    	  Next 'Next sample (Y = 1 to 60)
    	  
      'Making the average of the 60 measurement.
      'Since the Heading is vectorial, no need to divide by 60
      'ÃƒÅ½Ã‚Â¸ = atan(opp/adj) is same as ÃƒÅ½Ã‚Â¸ = atan((opp/60)/(adj/60))
      Roll = Round(Roll/60,2)
      Pitch = Round(Pitch/60,2)
      Heading = ATN2(Heading_y, Heading_x)

'       If Heading_x >= 0 AND Heading_y >= 0 Then
'             Heading = Round(ATN2(Heading_y,Heading_x),2)
'             ElseIf Heading_x < 0 AND Heading_y >= 0 Then
'              Heading = Round(ATN2(Heading_y,Heading_x),2)+270
'              ElseIf Heading_x < 0 AND Heading_y < 0 Then
'                Heading = Round(ATN2(Heading_y,Heading_x),2)+180
'                ElseIf Heading_x >= 0 AND Heading_y < 0 Then
'                  Heading = Round(ATN2(Heading_y,Heading_x),2)+90
'                  EndIf      

      Heading = Heading + Mag_Var
      If Heading >=  360 Then
        Heading = Heading - 360
      ElseIf Heading < 0 Then
        Heading = Heading + 360
      EndIf
      Heading = Round(Heading,2)
    
      CallTable FileCompass
    EndIf 'With_Compass
    WhereAmI = "End Compass, collect power"

'Flowmeter (W6) collect -------------------------------------------------------


'Water Detection --------------------------------------------------------------
    If With_WD_Main <> 0 Then
      WhereAmI = "Check Water Detection"
      Water_Detection_Main = 0
      VoltSe(Water_Detection_Main,1,AutoRange,U1,0,0,15000,1,0)
      PortSet(C4,0)
    EndIf

'Buoy TAG with name, GPS, Compass, Flow & WaterDetection
  
    TAGString = "[INIT]" & Buoy_Name & "," & UTC_Date_Hyphen & "," & UTC_Time_DDot & "," & Latitude & "," & Longitude & "," & Heading & "," & Pitch & "," & Roll & "," & COG & "," & SOG & "," & Water_Detection_Main
    
        

    ToTransmit = FileOpen("CRD:" & Buoy_Name & "_" & UTC_Date_Short & UTC_Time_Short & ".dat","a",-1)
    TAGFile = FileOpen("CRD:" & Buoy_Name & "_TAGFile.txt","a",-1)
    
    Call WriteTagString
  
'Power (M3) -------------------------------------------------------------------
    If With_Power <> 0 Then
      SerialOpen(SerialPower,19200,51,600,200)
      For X = 1 To 4
        SerialOut(SerialPower,CHR(13),">",2,50)
        SerialOut(SerialPower,"d",0,1,50)
        SerialOut(SerialPower,"v",0,1,50)
        SerialOut(SerialPower,CHR(13),CHR(13),1,50) 
        SerialIn(RawPower,SerialPower,100,CHR(13),200)
        SplitStr(Power,RawPower,0,11,0)
        SplitStr(PowerString,RawPower,0,11,0)
        If Len(Power(11)) > 5 Then
          ExitFor
        EndIf
      Next X
      SerialClose(SerialPower)
'        'Power(11) = Relay state, must have 7 char
'        'Try a second time if it took the sample when the Power Manager
'        '   was sampling too
'        If Len(Power(11)) > 5 Then
'          SerialClose(SerialPower)
'      Else
'        SerialOut(SerialPower,CHR(13),">",2,50)
'        SerialOut(SerialPower,"d",0,1,50)
'        SerialOut(SerialPower,"v",0,1,50)
'        SerialOut(SerialPower,CHR(13),CHR(13),1,50) 
'        SplitStr(Power,RawPower,0,11,0)
'        SplitStr(PowerString,RawPower,0,11,0)
'        SerialClose(SerialPower)
'      EndIf
    
      If VBatt1 > VBatt2 Then
        VBatt_to_SD = VBatt1
      Else
        VBatt_to_SD = VBatt2
      EndIf
      
      CallTable FilePower
      
      TAGString = "[POWR]" & VBatt1 & "," & ABatt1 & "," & VBatt2 & "," & ABatt2 & "," & VSolar & "," & ASolar & "," & AMain & "," & ATurbine & "," & AWinch & "," & PM_RH & "," & PowerString(11)
      Call WriteTagString
    
    EndIf

'ECO-Triplet/w (W3) collect ---------------------------------------------------
     WhereAmI = "See if triplet is done"
     If With_Triplet <> 0 Then
      Triplet_Timer = Timer(4,Sec,4)
      Timer(4,Sec,3) 'Timer #4 Stop&Reset
      If Triplet_Timer < 17 Then
        Delay(1,17-Triplet_Timer,Sec)
        EndIf
      WhereAmI = "Collect triplet"
      SerialInRecord(SerialTriplet,RawTriplet,&H4242,0,&H0D0A,NBR,01)
      SerialClose(SerialTriplet)
      RawTriplet = "BB"+RawTriplet
      SplitStr(Triplet(),RawTriplet,CHR(09),11,4)
      'Getting the values in long (0.000) from scientific values (0.00E+00) 
      Scattering = Round(Sct_Value,7)
      Chlorophyll = Chl_Value
      FDOM = FDOM_Value
      CallTable FileTriplet
      
      TAGString = "[TRP1]" & Scattering & "," & Chlorophyll & "," & FDOM
      Call WriteTagString
      
      EndIf 'With_Triplet
      

'------------------------------------------------------------------------------
'Pumped sensor (SBE37, Seafet & SUNA) -----------------------------------------
    WhereAmI = "See if pump is running 30sec"
    If Well_Switch = True AND (With_SBE37 <> 0 OR With_Seafet <> 0 OR With_SUNA <> 0) Then
      Well_Timer = Timer(3,Sec,4)
      Timer(3,Sec,3) 'Timer #3 Stop and Reset
      If Well_Timer < 30 Then
        Delay(1,30-Well_Timer,Sec)
        EndIf
      EndIf 
      WhereAmI = "Pump ran 30sec"

'SUNA (W4) start --------------------------------------------------------------
    If With_SUNA <> 0 Then
      WhereAmI = "Starting SUNA"
      SerialOpen(SerialSUNA,19200,3,20,250)
      SerialOut(SerialSUNA,"$","CMD?",1,400)
      SerialOut(SerialSUNA,"measure 1"&CHR(13),CHR(10),1,50)
      SerialIn(RawSUNADark,SerialSUNA,150,CHR(13),80) 'The Dark sample is nearly auto, then at least 12sec for the Light one
      
      Timer(5,Sec,0) 'Timer #5 Start for at least 12 sec
      EndIf
      
'Collect OCR_R ----------------------------------------------------------------

    If With_OCR_R <> 0 AND Well_Switch = True Then
      SerialOpen(SerialOCRR,19200,3,0,800)
      Well_Timer = Timer(3,Sec,4)
      If Well_Timer < 8 Then
        Delay(1,8-Well_Timer,Sec)
      EndIf
      SerialFlush(SerialOCRR)
      StringOCRR = ""
      RawOCRR = ""
      For Y = 1 To 3
        SerialInRecord(SerialOCRR,RawOCRR,&H5341,0,&H0D0A,NBR,101)
        BytesBuffer = Hex(ASCII(RawOCRR(1,1,1)))
        If BytesBuffer = "54" Then
          SerialClose(SerialOCRR)
          For X = 1 To 393
            BytesBuffer = Hex(ASCII(RawOCRR(1,1,X)))
            If Len(BytesBuffer) = 1 Then
              BytesBuffer = "0" + BytesBuffer
            EndIf
            StringOCRR = StringOCRR + BytesBuffer
          Next X
          StringOCRR = "5341" + StringOCRR + "0D0A"
          ExitFor
        EndIf
      Delay(1,2,Sec)
      Next Y
      If With_OCR_I = 0 Then
        CallTable FileHyperOCR
      EndIf
    EndIf


'Collect OCR_I ---------------

    If With_OCR_I <> 0 Then
      SerialOpen(SerialOCRI,19200,51,0,800)
      Tower_Timer = Timer(7,Sec,4)
      If Tower_Timer < 8 Then
        Delay(1,8-Tower_Timer,Sec)
      EndIf
      SerialFlush(SerialOCRI)
      StringOCRI = ""
      RawOCRI = ""
      For Y = 1 To 3
        SerialInRecord(SerialOCRI,RawOCRI,&H5341,0,&H0D0A,NBR,101)
        BytesBuffer = Hex(ASCII(RawOCRI(1,1,1)))
        If BytesBuffer = "54" Then
          SerialClose(SerialOCRI)
          For X = 1 To 393
            BytesBuffer = Hex(ASCII(RawOCRI(1,1,X)))
            If Len(BytesBuffer) = 1 Then
              BytesBuffer = "0" + BytesBuffer
            EndIf
            StringOCRI = StringOCRI + BytesBuffer
          Next X
          StringOCRI = "5341" + StringOCRI + "0D0A"
          ExitFor
        EndIf
      Delay(1,2,Sec)
      Next Y
      CallTable FileHyperOCR
    EndIf
      
'
'      SerialInRecord(SerialOCRI,RawOCRI,&H5341,0,&H0D0A,NBR,101)
'      SerialClose(SerialOCRI)
'      For X = 1 To 393
'        BytesBuffer = Hex(ASCII(RawOCRI(1,1,X)))
'        If Len(BytesBuffer) = 1 Then
'          BytesBuffer = "0" + BytesBuffer
'        EndIf
'        Delay(1,1,sec)
'        StringOCRI = StringOCRI + BytesBuffer
'      Next X
'      StringOCRI = "5341" + StringOCRI + "0D0A"
'      
'      CallTable FileHyperOCR
'    EndIf


'SBE37 (W1) -------------------------------------------------------------------
    If With_SBE37 <> 0 Then
      WhereAmI = "Taking CTD"
      SerialFlush(SerialSBE37)

      For X = 1 To 3 Step 1
        RawSBE37 = ""
        SBE37() = ""
        SerialOut(SerialSBE37,CHR(13),"S>",1,50)
        If X = 1 Then
          SerialOut(SerialSBE37,"tss"&CHR(13)," ",1,400)
        Else
          SerialOut(SerialSBE37,"sl"&CHR(13)," ",1,400)
        EndIf
        SerialIn(RawSBE37,SerialSBE37,400,83,60)
        SplitStr(SBE37,RawSBE37,",",4,0)
        If Len(RawSBE37) = 39 AND SBE37(4) <> "" Then
          ExitFor
        EndIf
      Next X
      
      SerialClose(SerialSBE37)
      CallTable FileSBE37
      
      TAGString = "[CTD]" & Water_Temp & "," & Conductivity & "," & Salinity & "," & Density
      Call WriteTagString
      
     EndIf
    WhereAmI = "CTD's finished"
    
'Seafet (W2) ------------------------------------------------------------------   
    If With_Seafet <> 0 Then
      WhereAmI = "Taking Seafet"
      SerialOpen(SerialSeafet,19200,3,20,900) 'Seafet string is around 100, but bigger buffer for Coef.
      For X = 1 To 3 Step 1
        SerialFlush(SerialSeafet)
        RawSeafet = ""
        Seafet_Value() = ""
        SerialOut(SerialSeafet,CHR(13),"S>",2,50)
        If X = 1 Then
          SerialOut(SerialSeafet,"tss"&CHR(13),CHR(13),1,50)
        Else
          SerialOut(SerialSeafet,"sl"&CHR(13),CHR(13),1,50)
        EndIf
        SerialIn(RawSeafet,SerialSeafet,800,CHR(13),125) 'Seafet string is around 100
        SplitStr(Seafet_Value,RawSeafet,",",10,14)
        Int_pH = Int_pH_Value
        Ext_pH = Ext_pH_Value
        If Len(RawSeafet) > 97 AND Mid(RawSeafet,24,1) = "T" AND Int_pH < 12 AND Int_pH > 3 AND Ext_pH < 12 AND Ext_pH > 3 Then
          ExitFor
        EndIf
      Next X
        

      
      If Error_Flag = 0000 Then
        Error_Flag = 0
      Else
        Error_Flag = 1
      EndIf
      
      TAGString = "[PH]" & Ext_pH & "," & Int_pH & "," & Error_Flag      
        
      If Seafet_Auto_Correction <> 0 AND Salinity > 10 Then
        K0_Int_Exp = ""
        K2_Int_Exp = ""
        K0_Ext_Exp = ""
        K2_Ext_Exp = ""
        K0_Int = ""
        K2_Int = ""
        K0_Ext = ""
        K2_Ext = ""
        
'        For X = 1 To 5 Step 1
'        Coeff_Raw = ""
'          SerialFlush(SerialSeafet)
'          SerialOut(SerialSeafet,CHR(13),"S>",2,50)
'          SerialOut(SerialSeafet,"dc"&CHR(13),"K0",1,400)
'          SerialIn(Coeff_Raw,SerialSeafet,200,84,200) 'Terminaison character is "T" (ASCII #84)
'          If Len(Coeff_Raw) > 117 Then
'            ExitFor
'          EndIf
'        Next X

        For X = 1 To 5 Step 1
          If K0_Int_Exp = "" OR K0_Int = "NAN" Then
            SerialFlush(SerialSeafet)
            SerialOut(SerialSeafet,CHR(13),"S>",2,50)
            SerialOut(SerialSeafet,"K0"&CHR(13),"",1,0)
            SerialIn(K0_Int_Exp,SerialSeafet,100,39,40)
            SerialIn(K0_Int_Exp,SerialSeafet,100,39,20)
            If Len(K0_Int_Exp) <> 13 OR Mid(K0_Int_Exp,10,1) <> "e" Then
              K0_Int_Exp = ""
            EndIf                 
          EndIf
          
          If K2_Int_Exp = "" OR K2_Int = "NAN" Then
            SerialFlush(SerialSeafet)
            SerialOut(SerialSeafet,CHR(13),"S>",2,50)
            SerialOut(SerialSeafet,"K2"&CHR(13),"",1,0)
            SerialIn(K2_Int_Exp,SerialSeafet,100,39,40)
            SerialIn(K2_Int_Exp,SerialSeafet,100,39,20)
            If Len(K2_Int_Exp) <> 13 OR Mid(K2_Int_Exp,10,1) <> "e" Then
              K2_Int_Exp = ""
            EndIf            
          EndIf
          
          If K0_Ext_Exp = "" OR K0_Ext = "NAN" Then
            SerialFlush(SerialSeafet)
            SerialOut(SerialSeafet,CHR(13),"S>",2,50)
            SerialOut(SerialSeafet,"KDF0"&CHR(13),"",1,0)
            SerialIn(K0_Ext_Exp,SerialSeafet,100,39,40)
            SerialIn(K0_Ext_Exp,SerialSeafet,100,39,20)
            If Len(K0_Ext_Exp) <> 13 OR Mid(K0_Ext_Exp,10,1) <> "e" Then
              K0_Ext_Exp = ""
            EndIf
          EndIf
          
          If K2_Ext_Exp = "" OR K2_Ext = "NAN" Then
            SerialFlush(SerialSeafet)
            SerialOut(SerialSeafet,CHR(13),"S>",2,50)
            SerialOut(SerialSeafet,"KDF2"&CHR(13),"",1,0)
            SerialIn(K2_Ext_Exp,SerialSeafet,100,39,40)
            SerialIn(K2_Ext_Exp,SerialSeafet,100,39,20)
            If Len(K2_Ext_Exp) <> 13 OR Mid(K2_Ext_Exp,10,1) <> "e" Then
              K2_Ext_Exp = ""
            EndIf
          EndIf
          
        K0_Int = K0_Int_Exp
        K2_Int = K2_Int_Exp
        K0_Ext = K0_Ext_Exp
        K2_Ext = K2_Ext_Exp
        Next X     
       

        
        'K0_Int = Mid(Coeff_Raw,15,9)
        'K0_Int_Exp = Mid(Coeff_Raw,25,3)
        'K0_Int = K0_Int * 10^K0_Int_Exp
  
        'K2_Int = Mid(Coeff_Raw,48,9)
        'K2_Int_Exp =Mid(Coeff_Raw,58,3)
        'K2_Int = K2_Int *10^K2_Int_Exp
  
        'K0_Ext = Mid(Coeff_Raw,81,9)
        'K0_Ext_Exp = Mid(Coeff_Raw,91,3)
        'K0_Ext = K0_Ext *10^K0_Ext_Exp
  
        'K2_Ext = Mid(Coeff_Raw,114,9)
        'K2_Ext_Exp = Mid(Coeff_Raw,124,3)
        'K2_Ext = K2_Ext *10^K2_Ext_Exp
        

        
        Water_Temp_K = Kelvin + Water_Temp
        Snernst = (R*Water_Temp_K*LN(10))/F
        Clt = (0.99889/35.453)*(Salinity/1.80655)*(1000/(1000-(1.005*Salinity)))
        I = (19.924*Salinity)/(1000-(1.005*Salinity))
        Adh = (0.0000034286*(Water_Temp^2))+(0.00067524*Water_Temp)+0.49172143
        log_yHClT = (-Adh*SQR(I))/(1+(1.394*SQR(I)))+((0.08885-(0.000111*Water_Temp))*I)
        St = (0.1400/96.062)*(Salinity/1.80655)
        Ks1 = (-4276.1/Water_Temp_K)+141.328-(23.093*LN(Water_Temp_K))
        Ks2 = ((-13856/Water_Temp_K)+324.57-(47.986*LN(Water_Temp_K)))*SQR(I)
        Ks3 = ((35474/Water_Temp_K)-771.54+(114.723*LN(Water_Temp_K)))*I
        Ks4 = (2698/Water_Temp_K)*I^1.5
        Ks5 = (1776/Water_Temp_K)*I^2
        Ks = (1-(0.001005*Salinity))*EXP(Ks1+Ks2+Ks3-Ks4+Ks5)
        
        Int_pH_P = Round((CTYPE(Volt_Int_pH,Float) - K0_Int - (K2_Int*Water_Temp))/Snernst,4)
        Ext_pH_P = Round(((CTYPE(Volt_Ext_pH,Float) - K0_Ext - (K2_Ext*Water_Temp))/Snernst) + LOG(Clt) + (2*log_yHClT) - LOG(1+(St/Ks)) - LOG((1000-(1.005*Salinity))/1000),4)
      
        If Int_pH_P <> "NAN" AND Ext_pH_P <> "NAN" Then
          CallTable FileSeafet_Pro
          TAGString = "[PHPRO]" & Ext_pH_P & "," & Int_pH_P & "," & Error_Flag & "," & Ext_pH & "," & Int_pH
        EndIf 
      EndIf 'Auto_Correction
      
      CallTable FileSeafet
      
      Call WriteTagString
      
    EndIf 'With_Seafet


'SUNA (W4) collect data ------------------------------------------------------------
    If With_SUNA <> 0 Then
      WhereAmI = "See if SUNA is done"
      
      Timer_Value(5) = Timer(5,Sec,4)
      Timer(5,Sec,3) 'Timer 5 Stop and Reset
      If Timer_Value(5) < 12 Then
        Delay(1,12-Timer_Value(5),Sec)
      EndIf   
      
      WhereAmI = "Collect SUNA"  
      SerialInRecord(SerialSUNA,RawSUNALight,&H4C43,0,&H0D0A,NBR,101)
      SerialOut(SerialSUNA,"sleep"&CHR(13),0,1,0)
      SerialClose(SerialSUNA)
      
      If RawSUNADark = "" Then
        RawSUNADark = "NAN"
      EndIf
      
      If RawSUNADark <> "NAN" AND RawSUNALight <> "NAN" Then
        SplitStr(SUNADark(),RawSUNADark,",",8,4)
        CallTable FileSUNA_Dark
        RawSUNALight = "SATSLC"&RawSUNALight
        SplitStr(SUNALight(),RawSUNALight,",",8,4)
        CallTable FileSUNA_Light
        
        TAGString = "[SUNA]" & Dark_Nitrate & "," & Light_Nitrate & "," & Dark_Nitrogen_in_Nitrate & "," & Light_Nitrogen_in_Nitrate & "," & Dark_Bromide & "," & Light_Bromide
        Call WriteTagString
      
      EndIf
    EndIf

'Pumped sensor are done, close pump -------------------------------------------
    If Well_Switch = True Then
      WhereAmI = "Close pump"
      SW12(SW12_2,0)
      Well_Switch = False
      EndIf
    
'PAR and Delay for WMT700 and WXT536 ------------------------------------------
    WhereAmI = "See if weather is done"
    If With_PAR <> 0 OR With_WMT700 <> 0 OR With_WXT536 <> 0 Then
      Timer(1,Sec,1)' Weather_Timer
      Weather_Timer = Timer(1,Sec,4)
      'Delay to make sure the instruments are sampling for at 61sec
      If Weather_Timer < 61 Then  
        Delay (1,61-Weather_Timer,Sec)
        EndIf
      Timer(1,Sec,3) 'Stop and reset on Timer#1
    EndIf
    
	  WhereAmI = "Collect PAR"
	  If With_PAR <> 0 Then
      SerialIn(RawPAR,SerialPAR,10,CHR(13),60)
      SplitStr(PARSensor(),RawPAR,",",5,4)
      SerialClose(SerialPAR)
      
      CallTable FilePAR
     EndIf
    

'WMT700 and WXT536 Polling Sample--- ------------------------------------------
    If With_WXT536 <> 0 Then
      WhereAmI = "Collect WXT"
      RawR1_Wind = ""
      RawR2_Weather = ""
      RawR3_Rain = ""
      
      For X = 1 To 3 Step 1
        SerialOut(SerialTower,CHR(13)&CHR(10),0,1,10)
        If RawR1_Wind = "" Then
          SerialOut(SerialTower,"2R1!",0,1,10)
          SerialIn(RawR1_Wind,SerialTower,20,13,80)
          RawR1_Wind = Mid(RawR1_Wind,5,80)
          SplitStr(WXT536_Wind(),RawR1_Wind,",",6,0)
          If WXT536_Wind(6) = "" Then
            RawR1_Wind = ""
          EndIf
        EndIf
        
        If RawR2_Weather = "" Then
          SerialOut(SerialTower,"2R2!",0,1,10)
          SerialIn(RawR2_Weather,SerialTower,20,13,30)
          RawR2_Weather = Mid(RawR2_Weather,5,30)
          SplitStr(WXT536_Weather(),RawR2_Weather,",",3,0)
          If WXT536_Weather(3) = "" Then
            RawR2_Weather = ""
          EndIf
        EndIf
        
        If RawR3_Rain = "" Then
          SerialOut(SerialTower,"2R3!",0,1,10)
          SerialIn(RawR3_Rain,SerialTower,20,13,80)
          RawR3_Rain = Mid(RawR3_Rain,5,80)
          SplitStr(WXT536_Rain(),RawR3_Rain,",",6,0)
          If WXT536_Rain(6) = "" Then
            RawR3_Rain = ""
          EndIf
        EndIf
        
      Next X
'      SerialOut(SerialTower,CHR(13)&CHR(10),0,1,10)        
'  	  SerialOut(SerialTower,"2R!","Sx",1,100)                          '  Collecting data from WXT536
'  	  SerialInRecord(SerialTower,RawR1_Wind,&H5231,0,&H0D0A,NBR,101)     '  R1(5231) is the wind, Sx is the last data sent then /r/n (0D0A)                                                           '                      '
'  	  SerialInRecord(SerialTower,RawR2_Weather,&H5232,0,&H0D0A,NBR,101)  '  R2 is the weather, Pa is the last data sent
'  	  SerialInRecord(SerialTower,RawR3_Rain,&H5233,0,&H0D0A,NBR,101)     '  R3 is the rain, Hi is the last data sent
'  	  
'      RawR1_Wind = Mid(RawR1_Wind,2,80)        '  Removing extra comma after 2R*
'      RawR2_Weather = Mid(RawR2_Weather,2,30)  '
'      RawR3_Rain = Mid(RawR3_Rain,2,80)        '
'  
'      If RawR1_Wind = "AN" Then
'        RawR1_Wind = "NAN"
'        Else
'          SplitStr(WXT536_Wind(),RawR1_Wind,",",6,0)        ' Splitting the WXT536 data in Arrays
'          EndIf
'          
'      If RawR2_Weather = "AN" Then
'        RawR2_Weather = "NAN"
'        Else
'          SplitStr(WXT536_Weather(),RawR2_Weather,",",3,0)  '
'          EndIf
'          
'      If RawR3_Rain = "AN" Then
'        RawR3_Rain = "NAN"
'        Else
'          SplitStr(WXT536_Rain(),RawR3_Rain,",",6,0)
'          EndIf
      
      CallTable FileWXT536
      EndIf
      
  	If With_WMT700 <> 0 Then    
  	  WhereAmI = "Collect WMT"                                                                     '
      SerialOut(SerialTower,"$Apoll,1"&CHR(13)&CHR(10),"Sx",1,100)             '
      SerialInRecord(SerialTower,RawWMT700,&H574D,0,&H0D0A,NBR,101)         '  poll,1 is the WMT700 wind, Sx is the last data sent
      SerialOut(SerialTower,"$Asleep"&CHR(13)&CHR(10),"",1,0)
    
      RawWMT700 = Mid(RawWMT700,7,80)    ' Removing the 6 first digit to pass the numerical value for the type of SplitStr
      
      If RawWMT700 = "AN" Then
        RawWMT700 = "NAN"
        Else
          SplitStr(WMT700(),RawWMT700,",",6,0)
          EndIf
          
      CallTable FileWMT700
      EndIf
    
'Closing Tower's Serial -----------
    If With_WXT536 <> 0 OR With_WMT700 <> 0 OR With_Compass <> 0 Then
	    SerialClose(SerialTower)
	    SW12(SW12_1,0)
	    Tower_Switch = False
	    WhereAmI = "Close Tower"
	    EndIf	  


'Creating Weather file if Wind, GPS & Compass ---------------------------------   
    If WMT700(5) = CHR(00) OR WMT700(5) = 0 Then  ' If there's data from WMT700, taking them as Wind
      Wind() = WXT536_Wind()
      WindTAG = "[W536]"                    ' Otherwise take the WXT536
    Else                                    '
      Wind() = WMT700()
      WindTAG = "[W700]"                    '
    EndIf         
    
    If (With_WMT700 <> 0 OR With_WXT536 <> 0) AND With_GPS <> 0 AND Pitch <> "NAN" AND Roll <> "NAN" Then 
      
      Dim W                                    ' Small loop to correct the wind direction
      For W = 1 To 3                           ' with the heading (which is already corrected with magnetic
        Wind(W) = Wind(W)+Heading              ' declinaison from the GPS
        If Wind(W) >=  360 Then                '
          Wind(W) = Round(Wind(W) - 360,2)     '
          ElseIf Wind(W) < 0 Then              '
            Wind(W) = Round(Wind(W) + 360,2)   '
            EndIf                              '
        Next                                   '
  
'Wind = Wind_Dir_Min, Wind_Dir_Ave, Wind_Dir_Max, Wind_Spd_Min, Wind_Spd_Ave, Wind_Spd_Max
'             (1)          (2)          (3)            (4)          (5)            (6)
  
      'Finding speed vector (x,y) with direction from Wind_Direction_Average
      'With compensation from Pitch/Roll and Buoy's displacement
      Spd_Min_x = ((Wind(4)/COS(Pitch))*SIN(Wind(2))) + Buoy_SOG_x
      Spd_Min_y = ((Wind(4)/COS(Roll))*COS(Wind(2))) + Buoy_SOG_y
      Wind_Spd_Min = Round(SQR(PWR(Spd_Min_x,2)+PWR(Spd_Min_y,2)),2)
      
      Spd_Ave_x = ((Wind(5)/COS(Pitch))*SIN(Wind(2)))+ Buoy_SOG_x
      Spd_Ave_y = ((Wind(5)/COS(Roll))*COS(Wind(2)))+ Buoy_SOG_y
      Wind_Spd_Ave = Round(SQR(PWR(Spd_Ave_x,2)+PWR(Spd_Ave_y,2)),2)
      
      Spd_Max_x = ((Wind(6)/COS(Pitch))*SIN(Wind(2)))+ Buoy_SOG_x
      Spd_Max_y = ((Wind(6)/COS(Roll))*COS(Wind(2)))+ Buoy_SOG_y
      Wind_Spd_Max = Round(SQR(PWR(Spd_Max_x,2)+PWR(Spd_Max_y,2)),2)
      
  
      'Finding direction vector (x,y) with speed from Wind_Speed_Average
      Dir_Min_x = ((Wind(5)/COS(Pitch))*SIN(Wind(1))) + Buoy_SOG_x
      Dir_Min_y = ((Wind(5)/COS(Roll))*COS(Wind(1))) + Buoy_SOG_y
      
      Dir_Ave_x = ((Wind(5)/COS(Pitch))*SIN(Wind(2))) + Buoy_SOG_x
      Dir_Ave_y = ((Wind(5)/COS(Roll))*COS(Wind(2))) + Buoy_SOG_y
      
      Dir_Max_x = ((Wind(5)/COS(Pitch))*SIN(Wind(3))) + Buoy_SOG_x
      Dir_Max_y = ((Wind(5)/COS(Roll))*COS(Wind(3))) + Buoy_SOG_y
      
      'Finding the final directions with tan-1(opp/adj) with absolute value, then
      'putting correction for the appropriate quadrant
      Dim A
      For A = 1 To 3
        If Wind_Dir_Vec((A*2)-1) >= 0 AND Wind_Dir_Vec(A*2) >= 0 Then
          Wind(A) = Round(ATN(Wind_Dir_Vec((A*2)-1) / Wind_Dir_Vec(A*2)),2)        
        ElseIf Wind_Dir_Vec((A*2)-1) < 0 AND Wind_Dir_Vec(A*2) >= 0 Then
          Wind(A) = Round(ATN(Wind_Spd_Vec(A*2) / ABS(Wind_Dir_Vec((A*2)-1))),2)+270          
        ElseIf Wind_Dir_Vec((A*2)-1) < 0 AND Wind_Spd_Vec(A*2) < 0 Then
          Wind(A) = Round(ATN(Wind_Dir_Vec((A*2)-1) / Wind_Dir_Vec(A*2)),2)+180           
        ElseIf Wind_Dir_Vec((A*2)-1) >= 0 AND Wind_Dir_Vec(A*2) < 0 Then
          Wind(A) = Round(ATN(ABS(Wind_Dir_Vec(A*2)) / Wind_Dir_Vec((A*2)-1)),2)+90
        EndIf
      Next
  
      CallTable Weather
      
      TAGString = WindTAG & Wind_Dir_Min & "," & Wind_Dir_Ave & "," & Wind_Dir_Max & "," & Wind_Spd_Min & "," & Wind_Spd_Ave & "," & Wind_Spd_Max
      Call WriteTagString
      
      TAGString = "[ATMS]" & Air_Temp & "," & Air_Humidity & "," & Air_Pressure & "," & PAR & "," & Rain_Total & "," & Rain_Duration & "," & Rain_Intensity
      Call WriteTagString
      
    EndIf 'Creating weather file
      

'Wave -------------------------------------------------------------------------
    RawWave = ""
    WhereAmI = "Collect Wave"
    If With_Wave <> 0 Then
      Wave() = ""
      SerialOpen(SerialWave,19200,3,600,200)
      For X = 1 To 3 Step 1
        SerialOut(SerialWave,CHR(13)&CHR(10),"CMD >>",2,200)
        SerialOut(SerialWave,"slt "&Buoy_Name&CHR(13)&CHR(10),",",1,100)
        SerialIn(RawWave,SerialWave,50,CHR(13),60)
        SplitStr(Wave(),RawWave,",",6,5)
        If Len(RawWave) > 38 AND Wave(6) <> "" Then
          ExitFor
        EndIf        
      Next X
      
      SerialClose(SerialWave)
      CallTable FileWave
      
      TAGString = "[WAVE]" & Wave_Date & "," & Wave_Time & "," & Wave_Period & "," & Wave_Hm0 & "," & Wave_H13 & "," & Wave_Hmax
      FileWrite(ToTransmit,TAGString,0)
      FileWrite(TAGFile,TAGString,0)
    EndIf
       

'ADCP -------------------------------------------------------------------------

    If With_ADCP <> 0 Then
      Call SampleADCP
      
      TAGString = ADCPTagString()
      
      Call WriteTagString

      CallTable FileADCP
    
    EndIf
      

'PCO2 -------------------------------------------------------------------------
    If With_PCO2 <> 0 AND (Salinity > 10 OR Bypass_Salinity = True) Then 'Security for PCO2 pump if not in water
      Buoy_TimeStamp_1990 = Public.TimeStamp(1)
      
                            'minus 10sec to not skip a scan planned at PCO2_Interval hour (got 3599s and didn't sampled)
      If (PCO2_Last_Sample + (PCO2_Interval*60*60) - 10 <= Buoy_TimeStamp_1990) AND PCO2_Sampling = false Then
        WhereAmI = "Entering PCO2 Loop"
        RawPCO2 = ""
        RawPCO2_Water = ""
        RawPCO2_Air = ""
        
        SerialOpen(SerialPCO2,19200,3,20,500)
        Delay(1,1,Sec)
        SerialFlush(SerialPCO2)
        SerialOut(SerialPCO2,CHR(27),"",2,50)
        Delay (1,500,mSec)
        SerialOut(SerialPCO2,CHR(27),"",1,0)
        Delay (1,500,mSec)
        SerialOut(SerialPCO2,"1","",1,0)
        Delay (1,500,mSec)
        SerialOut(SerialPCO2,"s","",1,0)
        SerialFlush(SerialPCO2)
        PCO2_Sampling = true
        PCO2_Last_Sample = Public.TimeStamp(1)
      EndIf
      
      If PCO2_Sampling = true Then
        'Watchdog if there's no data in 1Hour (if power disconnected during sampling)
                            'sec
        If (PCO2_Last_Sample + 3600) < Buoy_TimeStamp_1990 Then
          CallTable FilePCO2W
          CallTable FilePCO2A
          RawPCO2_Water = ""
          RawPCO2_Air = ""
          PCO2_Sampling = false
        Else

          SerialIn(RawPCO2,SerialPCO2,10,"Sample Complete",500)

          If RawPCO2_Water = "" Then
            'Search in RawPCO2 where PCO2_Water starts with "W M"
            PCO2WStart = InStr(1,RawPCO2,"W M,",4)
            PCO2WEnd = InStr(PCO2WStart,RawPCO2,CHR(10),2)
            If PCO2WStart <> 0 AND PCO2WEnd <> 0 Then
              'Collect from RawPCO2 to get RawPCO2_Water
              RawPCO2_Water = Mid(RawPCO2,PCO2WStart,PCO2WEnd - PCO2WStart)
            EndIf
          EndIf

          If RawPCO2_Air = "" Then
            'Search in RawPCO2 where PCO2_Air starts with "A M"
            PCO2AStart = InStr(1,RawPCO2,"A M,",4)
            PCO2AEnd = InStr(PCO2AStart,RawPCO2,CHR(10),2)
            If PCO2AStart <> 0 AND PCO2AEnd <> 0 Then
              'Collect from RawPCO2 to get RawPCO2_Water
              RawPCO2_Air = Mid(RawPCO2,PCO2AStart,PCO2AEnd - PCO2AStart)
            EndIf
          EndIf
            
          If RawPCO2_Water <> "" AND RawPCO2_Air <> "" Then 
            PCO2_Sampling = false
            SplitStr(PCO2,RawPCO2_Water,",",14,0)
            PCO2_Type = "W M"
            PCO2_Date = PCO2(1)&"-"&PCO2(2)&"-"&PCO2(3)
            PCO2_Time = PCO2(4)&":"&PCO2(5)&":"&PCO2(6)
            CO2_Water = PCO2(9)
            PCO2_Gaz_Pressure_Water = PCO2(13)
            PCO2W_Humidity = PCO2(11)
            CallTable FilePCO2W
              
            SplitStr(PCO2,RawPCO2_Air,",",14,0)
            PCO2_Type = "A M"
            PCO2_Date = PCO2(1)&"-"&PCO2(2)&"-"&PCO2(3)
            PCO2_Time = PCO2(4)&":"&PCO2(5)&":"&PCO2(6)
            CO2_Air = PCO2(9)
            PCO2_Gaz_Pressure_Air = PCO2(11)
            SerialFlush(SerialPCO2)
            SerialClose(SerialPCO2)
            CallTable FilePCO2A
              
            TAGString = "[PCO2]" & CO2_Water & "," & CO2_Air & "," & PCO2_Gaz_Pressure_Water & "," & PCO2_Gaz_Pressure_Air & "," & PCO2_Humidity
            
            Call WriteTagString
          
          EndIf 'If there's a water and an air string
        EndIf 'If Else Watchdog
      EndIf 'If PCO2_Sampling is True
    EndIf 'If there's a PCO2 and salinity (or bypass)
    

'Winch -------------------------------------------------------------------------
    If With_Winch <> 0 AND (Salinity > 10 OR Bypass_Salinity = Y) Then
      Buoy_TimeStamp_1990 = Public.TimeStamp(1)
      WinchMessage = "Entering the Winch Block"
      MissingCondition = 0
                            'minus 10sec to not skip a scan planned at Winch_Interval hour (got 3599s and didn't sampled)
      If (Winch_Last_Sample + (Winch_Interval*60*60) - 10 <= Buoy_TimeStamp_1990) AND Winch_Sampling = false Then
        WhereAmI = "Starting A Winch"
      
        If With_WXT536 <> 0 AND Air_Temp < Min_Air_Temp_for_Winch Then
          MissingCondition = MissingCondition + 1
          WinchMessage = "The air temperature is too cold"
        EndIf
        
        If With_Wave <> 0 Then
          If Wave_H13 > Max_Wave_H13_for_Winch Then
            MissingCondition = MissingCondition + 1
            WinchMessage = "Average wave is too high"
          EndIf
          If Wave_H13 > 1 AND Wave_Period < Min_Wave_Period_for_Winch  AND Wave_Period <> 0 Then
            MissingCondition = MissingCondition + 1
            WinchMessage = "Wave period is too short"
          EndIf
        EndIf
        
  '      If With_Flow <> 0 AND Flow > Max_Flow_for_Winch Then
  '        MissingCondition = MissingCondition + 1
  '        WinchMessage = "Surface flow is too high"
  '      EndIf
        
        If With_GPS <> 0 AND SOG > Max_Buoy_Speed_for_Winch Then
          MissingCondition = MissingCondition + 1
          WinchMessage = "The buoy is moving too fast"
        EndIf
        
        If With_Power <> 0 Then
          OnWhichBattery = Mid(PowerString(11),4,1)
          If OnWhichBattery = 1 Then
            Winch_Voltage = VBatt1
          Else If OnWhichBattery = 2 Then
            Winch_Voltage = VBatt2
          EndIf
          If Winch_Voltage < Min_Voltage_for_Winch Then
            MissingCondition = MissingCondition + 1
            WinchMessage = "The Winch voltage is too low"
          EndIf
        EndIf
  
        If MissingCondition = 0 Then
          SerialOpen(SerialWinch,19200,3,20,100)
          WinchString = ""
          SerialFlush(SerialWinch)
          Delay(1,500,mSec)
          SerialIn(WinchString,SerialWinch,100,10,60)
          If WinchString = "" Then
            SerialOut(SerialWinch,CHR(13),"",1,0)
            SerialOut(SerialWinch,"p1"&CHR(13)&CHR(10),.,2,300)
            Delay(1,2,Sec)
            SerialFlush(SerialWinch)
            SerialIn(WinchString,SerialWinch,100,10,100)
            SerialOut(SerialWinch,"p0"&CHR(13)&CHR(10),.,2,300)
            If Mid(WinchString,1,3) = "[S]" Then 'If String received from ctd
              SerialOut(SerialWinch,"X"&CHR(13)&CHR(10),"[W]1B>Operation Complete",2,200)
              SerialOut(SerialWinch,"R"&CHR(13)&CHR(10),"[W]09>Top Switch Activated",3,1000)
              SerialOut(SerialWinch,"K"&CHR(13)&CHR(10),"[W]13>Lenght Manually Cleared",2,200)
              SerialOut(SerialWinch,"Y"&Depth_for_Winch&CHR(13)&CHR(10),CHR(13),1,0)
              WinchMessage = "Winch Mission Started"
              Winch_Sampling = True
              Winch_Last_Sample = Buoy_TimeStamp_1990
              Winch_Date_Slash = Mid(GPS_Date,5,2)&"/"&Mid(GPS_Date,3,2)&"/"&Mid(GPS_Date,1,2)
              Winch_Date_Hyphen = UTC_Date_Hyphen
              Winch_Time_Short = UTC_Time_Short
              Winch_Time_DDot = UTC_Time_DDot
              Winch_Lat = Mid(Lat,1,2)&" "&Mid(Lat,3,5)&Lat_Hem
              Winch_Long = Mid(Lon,1,3)&" "&Mid(Lon,4,5)&Lon_Hem
            Else 'No string from CTD
              WinchMessage = "No String received from CTD"
            EndIf
          Else
            WinchMessage = "Winch already in function"
            Winch_Sampling = True
          EndIf
        EndIf
      
      Else If Winch_Sampling = True Then
        WhereAmI = "Check if the winch is done"
        
        SerialOpen(SerialWinch,19200,3,20,100)
        SerialFlush(SerialWinch)
        SerialIn(WinchString,SerialWinch,200,10,100)
        If WinchString = "" Then
          WhereAmI = "Collecting the winch"
          WinchFileName = Buoy_Name&"_"&Winch_Date_Hyphen&"_"&Winch_Time_Short
          WinchFile = FileOpen("CRD:WDATA_"&WinchFileName&".txt","a",-1)
          FileWrite(WinchFile,Winch_Time_DDot&" "&Winch_Date_Slash&CHR(10),0)
          FileWrite(WinchFile,Buoy_Name&CHR(10),0)     
          FileWrite(WinchFile,Winch_Lat&","&Winch_Long&CHR(10),0)    
          FileWrite(WinchFile,"D"&CHR(10),0)
          SerialOut(SerialWinch,"D"&CHR(13)&CHR(10),0,1,0)
          Do 
            WinchString = ""
            SerialIn(WinchString,SerialWinch,300,10,60)
            FileWrite(WinchFile,WinchString,0)
          Loop While WinchString <> ""
          
          WhereAmI = "Out of Do.. While Loop after winch"
          WinchString = ""
          FileClose(WinchFile)
          Winch_Sampling = False
          WinchMessage = "Winch Complete"
        Else
          WinchMessage = "Winch in Progress"
        EndIf
      
      Else
        WinchMessage = "Interval not reach"
      EndIf  
      
    TAGString = "[WNCH]" + WinchMessage
    Call WriteTagString
    
    EndIf

'Close all serial port on CR6 if still open
    For SerialPort = 11 To 16 Step 1
      If SerialPort = 12 Then 'SerialADCP, always open
        'Do not close the port
      Else If SerialPort = 13 AND WinchMessage <> "Interval not reach" Then
        'Do not close the port
      Else
        SerialClose(SerialPort)
      EndIf
    Next SerialPort
      
'Close all serial port on SDM4, except for PCO2 (40) which must stays on is PCO2 is sampling
    For SerialPort = 32 To 47 Step 1
      If SerialPort = 40 AND PCO2_Sampling = true Then
      'Do not close the port
      Else
        SerialClose(SerialPort)
      EndIf
    Next SerialPort
    
    CallTable Raw
    'CallTable SD
    
    If CO2_Water <> "#.#" AND CO2_Air <> "#.#" Then
      CO2_Water = "#.#"
      CO2_Air = "#.#"
    EndIf

    If RawPCO2_Air <> "" AND RawPCO2_Water <> "" Then
      RawPCO2_Air = ""
      RawPCO2_Water = ""
      RawPCO2 = ""
    EndIf
    
    TAGString = "[END]"
    Call WriteTagString
    
    TAGString = ""
    Call WriteTagString
    
    FileClose(TAGFile)
    FileClose(ToTransmit)
    
    WhereAmI = "Scan end"
  NextScan
	
  SlowSequence
    Scan(1,Sec,0,0)
      If Manual_Tower_Switch = true AND Tower_Switch = false Then
        SW12(SW12_1,1)
        Tower_Switch = true
      EndIf
        
      If Manual_Tower_Switch = false AND Tower_Switch = true Then
        SW12(SW12_1,0)
        Tower_Switch = false
      EndIf
      
      If Manual_Well_Switch = true AND Well_Switch = false Then
        SW12(SW12_2,1)
        Well_Switch = true
      EndIf
        
      If Manual_Well_Switch = false AND Well_Switch = true Then
        SW12(SW12_2,0)
        Well_Switch = false
      EndIf
      
      If Send_Break_to_ADCP = true Then
        SerialBrk(SerialADCP,200)
        Send_Break_to_ADCP = false
      EndIf
    NextScan
EndProg


Sub WriteTagString
  FileWrite(TAGFile,TAGString & CHR(10),0)
  FileWrite(ToTransmit,TAGString & CHR(10),0)
EndSub


Sub CloseCR6SerialPorts
  'Close all serial port on CR6 if still open except ADCP
  For SerialPort = 11 To 16 Step 1
    If SerialPort = SerialADCP Then
      'Do not close the ADCP port
    Else
      SerialClose(SerialPort)
    EndIf
  Next SerialPort
EndSub


Sub CloseSDM4SerialPorts
'Close all serial port on SDM4, except for PCO2 (40) which must stays on is PCO2 is sampling
  For SerialPort = 32 To 47 Step 1
    If SerialPort = SerialPCO2 AND PCO2_Sampling = true Then
    'Do not close the port
    Else
      SerialClose(SerialPort)
    EndIf
  Next SerialPort
EndSub


Sub StartADCP
  If With_ADCP <> 0 Then
      SerialOpen(SerialADCP,115200,3,0,3000)
    EndIf
EndSub


Sub StartWaterDetectionSensor
 '5V to the Water Detection sensor, sample taked at the end --------------------
  If With_WD_Main <> 0 Then
    PortSet(C4,1)
  EndIf
EndSub


Sub StartWeatherInstruments
' Weather instrument include WXT536, WMT700, OCR, Compas
  If With_PAR <> 0 OR With_WMT700 <> 0 OR With_Compass <> 0 OR With_OCR_I <> 0 Then  
      SW12(SW12_1,1)
      Tower_Switch = True
      Tower_Timer = Timer(7,Sec,0)
    EndIf
    
  'Open the RS485 port if there's one of the intruments
  If With_WXT536 <> 0 OR With_WMT700 <> 0 OR With_Compass <> 0 Then
    'Opening SDM and PAR (T5) voltage. 1sec before communication  
    SerialOpen(SerialTower,19200,51,20,500) 'for 2R! test
  EndIf
  
  'Open the PAR port if present, sending the data as soon as it's ready
  If With_PAR <> 0 Then
    SerialOpen(SerialPAR,19200,3,20,100)
  EndIf
EndSub