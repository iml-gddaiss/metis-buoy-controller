'PCO2 related code
'### Serial Port ###
' Const SerialPCO2 = 40 'RS232

Public PCO2_Last_Sampling As Long
Public PCO2IsSampling As Boolean

Public PCO2AirIsCollected As Boolean = false
Public PCO2WaterIsCollected As Boolean = false

Dim UpdatePCO2Tables As Boolean = false


'### Data Variables ###
Dim RawPCO2 As String * 1000
Dim RawPCO2_Air As String * 100
Dim RawPCO2_Water As String * 100

Const PCO2_Water_Tag = "W M"
Const PCO2_Air_Tag = "A M"

Dim PCO2_Water (14) As String : Alias PCO2_Water = PCO2W_Year, PCO2W_Month, PCO2W_DDay, PCO2W_Hour, PCO2W_Minute, PCO2W_Second, PCO2W_Zero, PCO2W_Current, PCO2W_CO2, PCO2W_IRGA, PCO2W_Humidity, PCO2W_Humidity_Temperature, PCO2W_Gas_Pressure, PCO2W_Voltage
Units PCO2W_Zero = counts
Units PCO2W_Current = counts
Units PCO2W_CO2 = ppm
Units PCO2W_IRGA = 째C
Units PCO2W_Humidity = %
Units PCO2W_Humidity_Temperature = 째C
Units PCO2W_Gas_Pressure = mbar
Units PCO2W_Voltage = volts

Dim PCO2_Air(14) As String : Alias PCO2_Air = PCO2A_Year, PCO2A_Month, PCO2A_DDay, PCO2A_Hour, PCO2A_Minute, PCO2A_Second, PCO2A_Zero, PCO2A_Current, PCO2A_CO2, PCO2A_IRGA, PCO2A_Humidity, PCO2A_Humidity_Sensor_Temperature, PCO2A_Gas_Pressure, PCO2A_Voltage
Units PCO2A_Zero = counts
Units PCO2A_Current = counts
Units PCO2A_CO2 = ppm
Units PCO2A_IRGA = 째C
Units PCO2A_Humidity = %
Units PCO2A_Humidity_Sensor_Temperature = 째C
Units PCO2A_Gas_Pressure = mbar
Units PCO2A_Voltage = volts




'### Tables ###
DataTable(FilePCO2W,UpdatePCO2Tables,-1)
  DataInterval(0,0,Sec,10)
  Sample (1,PCO2W_Year &"-"& PCO2W_Month &"-"& PCO2W_DDay, String) : FieldNames("Date")
  Sample (1,PCO2W_Hour &":"& PCO2W_Minute &":"& PCO2W_Second, String) : FieldNames("Time")
  Sample (1,PCO2W_Zero,IEEE4)
  Sample (1,PCO2W_Current,IEEE4)
  Sample (1,PCO2W_CO2,IEEE4)
  Sample (1,PCO2W_IRGA,IEEE4)
  Sample (1,PCO2W_Humidity,IEEE4)
  Sample (1,PCO2W_Humidity_Temperature,IEEE4)
  Sample (1,PCO2W_Gas_Pressure,IEEE4)
  Sample (1,PCO2W_Voltage,IEEE4)
  Sample (1,RawPCO2,String)
  Sample (1,RawPCO2_Water,String)
EndTable

DataTable(FilePCO2A,UpdatePCO2Tables,-1)
  DataInterval(0,0,Sec,10)
  Sample (1,PCO2A_Year &"-"& PCO2A_Month &"-"& PCO2A_DDay, String) : FieldNames("Date")
  Sample (1,PCO2A_Hour &":"& PCO2A_Minute &":"& PCO2A_Second, String) : FieldNames("Time")
  Sample (1,PCO2A_Zero,IEEE4)
  Sample (1,PCO2A_Current,IEEE4)
  Sample (1,PCO2A_CO2,IEEE4)
  Sample (1,PCO2A_IRGA,IEEE4)
  Sample (1,PCO2A_Humidity,IEEE4)
  Sample (1,PCO2A_Humidity_Sensor_Temperature,IEEE4)
  Sample (1,PCO2A_Gas_Pressure,IEEE4)
  Sample (1,PCO2A_Voltage,IEEE4)
  Sample (1,RawPCO2,String)
  Sample (1,RawPCO2_Air,String)
EndTable



Function PCO2TagString As String * 200
  Dim _CO2_TAG_VALUES(5) As Float : Alias _CO2_TAG_VALUES = _CO2_Air, _CO2_Water, _CO2_Water_IRGA'_CO2_Pressure_Air, _CO2_Pressure_Water, _CO2_Humidity_Air

  _CO2_TAG_VALUES() = ""
  
  If PCO2W_CO2 <> "" Then
    _CO2_Water = PCO2W_CO2
  EndIf

  If PCO2A_CO2 <> "" Then 
    _CO2_Air = PCO2A_CO2
  Endif

  If PCO2W_IRGA <> "" Then
    _CO2_Water_IRGA = PCO2W_IRGA
  EndIf

  ' If PCO2A_Gas_Pressure <> "" Then 
  '   _CO2_Pressure_Air = PCO2A_Gas_Pressure
  ' Endif

  ' If PCO2W_Gas_Pressure <> "" Then 
  '   _CO2_Pressure_Water = PCO2W_Gas_Pressure
  ' Endif

  ' If PCO2A_Humidity <> "" Then 
  '   _CO2_Humidity_Air = PCO2A_Humidity
  ' Endif
    
  PCO2TagString = "[PCO2]" & _CO2_Air & "," & _CO2_Water & "," & _CO2_Water_IRGA '_CO2_Pressure_Air & "," & _CO2_Pressure_Water & "," & _CO2_Humidity_Air
EndFunction


'### Sampling ###

Sub StartPCO2
  If (SBE37_In_Saltwater OR Bypass_Salinity) Then
    Call logging("Starting PCO2")

    RawPCO2 = ""
    RawPCO2_Water = "" ' Also set to "" at the end of the Scan if PCO2 Tables were updated
    RawPCO2_Air = ""   ' Also set to "" at the end of the Scan if PCO2 Tables were updated

    PCO2_Water() = ""
    PCO2_Air() = ""

    SerialOpen(SerialPCO2,19200,3,20,500)
    Delay(1,1,Sec)
    SerialFlush(SerialPCO2)
    SerialOut(SerialPCO2,CHR(27),"",2,50)
    Delay (1,500,mSec)
    SerialOut(SerialPCO2,CHR(27),"",1,0)
    Delay (1,500,mSec)
    SerialOut(SerialPCO2,"1","",1,0)
    Delay (1,500,mSec)
    SerialOut(SerialPCO2,"s","",1,0)
    SerialFlush(SerialPCO2)
    
    PCO2IsSampling = true
    PCO2_Last_Sampling = Public.TimeStamp(1)
    PCO2WaterIsCollected = false
    PCO2AirIsCollected = false
  Else
    Call logging("Unable to start PCO2 (No salinity detected)")  
  EndIf
EndSub


Sub ClosePC02
  Call logging("Closing PCO2 Serial Port")
  SerialFlush(SerialPCO2)
  SerialClose(SerialPCO2)
EndSub


Function Collect_PCO2_Data(PCO2_Tag As String) As String * 100
  'PCO2_Tag = "A M" or "W M"
  Dim Start_Pos  As Long
  Dim End_Pos As Long
  
  Start_Pos = InStr(1,RawPCO2,PCO2_Tag & ",",4) 'Search in RawPCO2
  End_Pos = InStr(Start_Pos,RawPCO2,CHR(10),2)
  If Start_Pos <> 0 AND End_Pos <> 0 Then
    Collect_PCO2_Data = Mid(RawPCO2,Start_Pos, End_Pos - Start_Pos) 'Get the data from RawPCO2
  Else
    Collect_PCO2_Data = ""
  EndIf
  Call logging("PCO2 " &PCO2_Tag& " Data Collected: " & Collect_PCO2_Data)
EndFunction


Sub CollectPCO2
  Call logging("Collecting PCO2 Data")
  
  SerialIn(RawPCO2,SerialPCO2,10,"Sample Complete",500)
  Call logging("RawPCO2: " & RawPCO2)

  If NOT PCO2WaterIsCollected Then
    RawPCO2_Water = Collect_PCO2_Data(PCO2_Water_Tag)
    If RawPCO2_Water <> "" Then
      SplitStr(PCO2_Water,RawPCO2_Water,",",14,5)
      PCO2WaterIsCollected = true
    EndIf
  EndIf

  If NOT PCO2AirIsCollected Then
    RawPCO2_Air = Collect_PCO2_Data(PCO2_Air_Tag)
    If RawPCO2_Air <> "" Then
      SplitStr(PCO2_Air,RawPCO2_Air,",",14,5)
      PCO2AirIsCollected = true
    EndIf
  EndIf
EndSub


Sub PCO2WatchDog
 'Watchdog if there's no data in 1Hour (if power disconnected during sampling)
  If (PCO2_Last_Sampling + 3600) < Public.TimeStamp(1) Then
    Call logging("PCO2 Watchdog Triggered")
    
    Call Failed_Sampling_Warning("PCO2")
    
    If PCO2WaterIsCollected OR PCO2AirIsCollected Then
      UpdatePCO2Tables = true
    EndIf  
      
    Call ClosePC02
    PCO2IsSampling = false
  EndIf
EndSub


Sub PCO2Routine
  Dim TimeUntilNextSampling_Min as Float
  
  If With_PCO2 Then
    Call logging("Entering PCO2 Sequence")
    
    If PCO2IsSampling Then
      Call CollectPCO2
      
      If PCO2WaterIsCollected AND PCO2AirIsCollected Then
        Call ClosePC02
        UpdatePCO2Tables = true
    
        TAGString &= PCO2TagString()

        PCO2IsSampling = false
      Else
        Call PCO2WatchDog
      EndIf
    
    ElseIf (PCO2_Last_Sampling + (PCO2_Interval_Hr*3600) - 60 <= Public.TimeStamp(1)) Then 'minus 60sec to not skip a scan planned at PCO2_Interval hour (got 3599s and didn't sampled)
      Call logging("PCO2 Ready to start.")
      Call StartPCO2
    Else
      TimeUntilNextSampling_Min = (Public.TimeStamp(1) - PCO2_Last_Sampling + (PCO2_Interval_Hr*3600)) / 60 ' TODO Test
      Call logging("Second until next PCO2: " & TimeUntilNextSampling_Min)
    EndIf

  EndIf
EndSub

Sub ResetPCO2RawStrings
  If UpdatePCO2Tables Then
    Call logging("PCO2 String Resetted")
    RawPCO2_Air = ""
    RawPCO2_Water = ""
    PCO2WaterIsCollected = false
    PCO2AirIsCollected = false
  EndIf
EndSub
