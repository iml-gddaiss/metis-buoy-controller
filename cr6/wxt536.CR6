'WXT536 related code

'### Data Variables ###
Dim RawWXT536_Wind As String * 80
Dim RawWXT536_Weather As String * 45
Dim RawWXT536_Rain As String * 75

Dim WXT536_Weather(3) As Float : Alias WXT536_Weather = Air_Temp, Air_Humidity, Air_Pressure
'The wind is Dim because it depends on the presence of WMT700
Dim WXT536_Wind(6) As Float : Alias WXT536_Wind = Dir_Min2, Dir_Ave2, Dir_Max2, Spd_Min2, Spd_Ave2, Spd_Max2
Dim WXT536_Rain(6) As Float : Alias WXT536_Rain = Rain_Total, Rain_Duration, Rain_Intensity, Hail_Total, Hail_Duration, Hail_Intensity

Dim UpdateWXT536Table As Boolean = false

'### Units ###
Units Air_Temp = 째C
Units Air_Humidity = %
Units Air_Pressure = hPa
Units Dir_Min2 = 째
Units Dir_Ave2 = 째
Units Dir_Max2 = 째
Units Spd_Min2 = Kn
Units Spd_Ave2 = Kn
Units Spd_Max2 = Kn
Units Rain_Total = mm
Units Rain_Duration = sec
Units Rain_Intensity = mm/h
Units Hail_Total = mm
Units Hail_Duration = sec
Units Hail_Intensity = mm/h


'### Tables ###
DataTable(FileWXT536,UpdateWXT536Table,-1)
  DataInterval (0,0,Sec,10)
  Sample (1,Air_Temp,IEEE4)
  Sample (1,Air_Humidity,IEEE4)
  Sample (1,Air_Pressure,IEEE4)
  Sample (1,Dir_Min2,IEEE4)
  Sample (1,Dir_Ave2,IEEE4)
  Sample (1,Dir_Max2,IEEE4)
  Sample (1,Spd_Min2,IEEE4)
  Sample (1,Spd_Ave2,IEEE4)
  Sample (1,Spd_Max2,IEEE4)
  Sample (1,Rain_Total,IEEE4)
  Sample (1,Rain_Duration,IEEE4)
  Sample (1,Rain_Intensity,IEEE4)
  Sample (1,Hail_Total,IEEE4)
  Sample (1,Hail_Duration,IEEE4)
  Sample (1,Hail_Intensity,IEEE4)
EndTable

Sub StartRainTimer
  If With_WXT536 Then
    Call logging("Starting Rain Timer")
    Timer(Rain_Timer,Hr, 0)
  EndIf
EndSub


'### Sampling ###
Sub ResetWXT536
  If With_WXT536 Then        
    ' Reset Rain if 00:00 or active for more than 24h
    If ScanTime = "00:00:00" OR  Timer(Rain_Timer,Hr,4) >= Rain_Interval_Hr Then
      SerialOut(SerialTower,CHR(13)&CHR(10)&"2XZRU"&CHR(13)&CHR(10),"",1,0)
      SerialOut(SerialTower,CHR(13)&CHR(10)&"2XZRI"&CHR(13)&CHR(10),"",1,0)
      Timer(Rain_Timer,Hr,2) 'Timer #6 Reset&Start
      Call logging("WXT536 Rain Reset")
    EndIf	
        
    'Reset wind & weather measurements    
    SerialOut(SerialTower,CHR(13)&CHR(10)&"2XZM"&CHR(13)&CHR(10),"",1,0)    
  EndIf
EndSub


Sub CollectWXT536
  Dim X
  
  If With_WXT536 Then
    Call logging("Collecting WXT536")
    WhereAmI = "Collect WXT536"

    WXT536_Wind () = ""
    WXT536_Rain () = ""
    WXT536_Weather() = ""

    For X = 1 To 3 Step 1
      SerialOut(SerialTower,CHR(13)&CHR(10),0,1,10)
      If RawWXT536_Wind = "" Then
        SerialOut(SerialTower,"2R1!",0,1,10)
        SerialIn(RawWXT536_Wind,SerialTower,20,13,80)
        Call logging("Raw WMT536 Wind: " & RawWXT536_Wind) 
        RawWXT536_Wind = Mid(RawWXT536_Wind,5,80)
        SplitStr(WXT536_Wind(),RawWXT536_Wind,",",6,10)
        If WXT536_Wind(6) = "" Then
          RawWXT536_Wind = ""
        EndIf
      EndIf

      If RawWXT536_Weather = "" Then
        SerialOut(SerialTower,"2R2!",0,1,10)
        SerialIn(RawWXT536_Weather,SerialTower,20,13,30)
        Call logging("Raw WMT536 Weather: " & RawWXT536_Weather) 
        RawWXT536_Weather = Mid(RawWXT536_Weather,5,30)
        SplitStr(WXT536_Weather(),RawWXT536_Weather,",",3,10)
        If WXT536_Weather(3) = "" Then
          RawWXT536_Weather = ""
        EndIf
      EndIf

      If RawWXT536_Rain = "" Then
        SerialOut(SerialTower,"2R3!",0,1,10)
        SerialIn(RawWXT536_Rain,SerialTower,20,13,80)
        Call logging("Raw WMT536 Rain: " & RawWXT536_Rain) 
        RawWXT536_Rain = Mid(RawWXT536_Rain,5,80)
        SplitStr(WXT536_Rain(),RawWXT536_Rain,",",6,10)
        If WXT536_Rain(6) = "" Then
          RawWXT536_Rain = ""
        EndIf
      EndIf

    Next X

    UpdateWXT536Table = true

    Call logging("WXT536 Done")
    WhereAmI = "Finish WXT536"
  EndIf
EndSub
