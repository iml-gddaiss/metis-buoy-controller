'PCO2 related code
'### Serial Port ###
' Const SerialPCO2 = 40 'RS232

Public PCO2_Last_Sampling As Long
Public PCO2IsSampling As Boolean

Public PCO2AirIsCollected As Boolean = false
Public PCO2WaterIsCollected As Boolean = false

Dim UpdatePCO2Tables As Boolean = false


'### Data Variables ###
Dim RawPCO2 As String * 1000
Dim RawPCO2_Air As String * 100
Dim RawPCO2_Water As String * 100

Const PCO2_Water_Tag = "W M"
Const PCO2_Air_Tag = "A M"

StructureType PCO2_Struct
  Year As String
  Month As String
  Day As String
  Hour As String
  Minute As String
  Second As String
  Zero As Float
  Current As Float
  CO2 As Float
  IRGA As Float
  Humidity As Float
  Temperature As Float
  Gaz_Pressure As Float
  Voltage As Float
  
  Units Zero = counts
  Units Current = counts
  Units CO2 = ppm
  Units IRGA = °C
  Units Humidity = %
  Units Temperature = °C
  Units Gaz_Pressure = mbar
  Units Voltage = volts
  
  ReadOnly Year, Month, Day, Hour, Minute, Second, Zero, Current, CO2, IRGA, Humidity, Temperature, Gaz_Pressure, Voltage
EndStructureType

Dim PCO2_Water As PCO2_Struct
Dim PCO2_Air As PCO2_Struct


'### Tables ###
DataTable(FilePCO2W,UpdatePCO2Tables,-1)
  DataInterval(0,0,Sec,10)
  Sample (1,PCO2_Water_Tag,String) ' Is it nescessary ? FIXME
  Sample (1,PCO2_Water.Year &"-"& PCO2_Water.Month &"-"& PCO2_Water.Day, String) : FieldNames("Date")
  Sample (1,PCO2_Water.Hour &":"& PCO2_Water.Minute &":"& PCO2_Water.Second, String) : FieldNames("Time")
  Sample (1,PCO2_Water.Zero,IEEE4)
  Sample (1,PCO2_Water.Current,IEEE4)
  Sample (1,PCO2_Water.CO2,String)
  Sample (1,PCO2_Water.IRGA,IEEE4)
  Sample (1,PCO2_Water.Humidity,IEEE4)
  Sample (1,PCO2_Water.Temperature,IEEE4)
  Sample (1,PCO2_Water.Gaz_Pressure,IEEE4)
  Sample (1,PCO2_Water.Voltage,IEEE4)
  Sample (1,RawPCO2,String)
  Sample (1,RawPCO2_Water,String)
EndTable

DataTable(FilePCO2A,UpdatePCO2Tables,-1)
  DataInterval(0,0,Sec,10)
  Sample (1,PCO2_Air_Tag,String) ' Is it nescessary ? FIXME
  Sample (1,PCO2_Air.Year &"-"& PCO2_Air.Month &"-"& PCO2_Air.Day, String) : FieldNames("Date")
  Sample (1,PCO2_Air.Hour &":"& PCO2_Air.Minute &":"& PCO2_Air.Second, String) : FieldNames("Time")
  Sample (1,PCO2_Air.Zero,IEEE4)
  Sample (1,PCO2_Air.Current,IEEE4)
  Sample (1,PCO2_Air.CO2,String)
  Sample (1,PCO2_Air.IRGA,IEEE4)
  Sample (1,PCO2_Air.Humidity,IEEE4)
  Sample (1,PCO2_Air.Temperature,IEEE4)
  Sample (1,PCO2_Air.Gaz_Pressure,IEEE4)
  Sample (1,PCO2_Air.Voltage,IEEE4)
  Sample (1,RawPCO2,String)
  Sample (1,RawPCO2_Air,String)
EndTable



Function PCO2TagString As String
  Dim CO2_Air As String 
  Dim CO2_Water As String 

  CO2_Water = "#.#"
  CO2_Air = "#.#"
  
  If PCO2_W_CO2 <> "" Then
    CO2_Air = PCO2_W_CO2
  EndIf

  If PCO2_A_CO2 <> "" Then 
    CO2_Water = PCO2_A_CO2
  Endif
    
  PCO2TagString = "[PCO2]" & PCO2_Air.CO2 & "," & PCO2_Water.CO2 & "," & PCO2_Water.Gaz_Pressure & "," & PCO2_Air.Gaz_Pressure & "," & PCO2_Air.Humidity
EndFunction


'### Sampling ###

Sub StartPCO2
  If (SBE37_In_Saltwater OR Bypass_Salinity) Then
    Call logging("Starting PCO2")
    WhereAmI = "Start PCO2"  

    RawPCO2 = ""
    RawPCO2_Water = "" ' Also set to "" at the end of the Scan if PCO2 Tables were updated
    RawPCO2_Air = ""   ' Also set to "" at the end of the Scan if PCO2 Tables were updated

    PCO2_Water() = "" 
    PCO2_Air() = ""


    SerialOpen(SerialPCO2,19200,3,20,500)
    Delay(1,1,Sec)
    SerialFlush(SerialPCO2)
    SerialOut(SerialPCO2,CHR(27),"",2,50)
    Delay (1,500,mSec)
    SerialOut(SerialPCO2,CHR(27),"",1,0)
    Delay (1,500,mSec)
    SerialOut(SerialPCO2,"1","",1,0)
    Delay (1,500,mSec)
    SerialOut(SerialPCO2,"s","",1,0)
    SerialFlush(SerialPCO2)
    
    PCO2IsSampling = true
    PCO2_Last_Sampling = Public.TimeStamp(1)
    PCO2WaterIsCollected = false
    PCO2AirIsCollected = false
  Else
    Call logging("Unable to start PCO2 (No salinity detected)")  
  EndIf
EndSub


Sub ClosePC02
  Call logging("Closing PCO2 Serial Port")
  SerialFlush(SerialPCO2)
  SerialClose(SerialPCO2)
EndSub


Function Collect_PCO2_Data(PCO2_Tag) As String
  'PCO2_Tag = "A M" or "W M"
  Dim Start_Pos  As Long
  Dim End_Pos As Long
  
  Start_Pos = InStr(1,RawPCO2,PCO2_Tag & ",",4) 'Search in RawPCO2
  End_Pos = InStr(Start_Pos,RawPCO2,CHR(10),2)
  If Start_Pos <> 0 AND End_Pos <> 0 Then
    Collect_PCO2_Data = Mid(RawPCO2,Start_Pos, End_Pos - Start_Pos) 'Get the data from RawPCO2
  Else
    Collect_PCO2_Data = ""
  EndIf
  Call logging("PCO2 " &PCO2_Tag& " Data Collected: " & Collect_PCO2_Data)
EndFunction


Sub CollectPCO2
  Call logging("Collecting PCO2 Data")
  
  SerialIn(RawPCO2,SerialPCO2,10,"Sample Complete",500)
  Call logging("RawPCO2: " & RawPCO2)

  If NOT PCO2WaterIsCollected Then
    RawPCO2_Water = Collect_PCO2_Data(PCO2_Water_Tag)
    If RawPCO2_Water <> "" Then
      PCO2WaterIsCollected = true
    EndIf
  EndIf

  If NOT PCO2AirIsCollected Then
    RawPCO2_Air = Collect_PCO2_Data(PCO2_Air_Tag)
    If RawPCO2_Air <> "" Then
      PCO2AirIsCollected = true
    EndIf
  EndIf
EndSub


Sub WritePCO2Tables  ' FInd better name TODO
  SplitStr(PCO2_Water,RawPCO2_Water,",",14,0)
  SplitStr(PCO2_Air,RawPCO2_Air,",",14,0)
EndSub


Sub PCO2WatchDog
 'Watchdog if there's no data in 1Hour (if power disconnected during sampling)
  If (PCO2_Last_Sampling + 3600) < Public.TimeStamp(1) Then
    Call logging("PCO2 Watchdog Triggered")
    If PCO2WaterIsCollected OR PCO2AirIsCollected Then
      Call WritePCO2Tables
      UpdatePCO2Tables = true
    EndIf  
      
    Call ClosePC02
    PCO2IsSampling = false
  EndIf
EndSub


Sub PCO2Sampling  
  If With_PCO2 Then
    WhereAmI = "Entering PCO2 Loop"
    Call logging("Entering PCO2 Sequence")
    
    If PCO2IsSampling Then
      Call CollectPCO2
      
      If PCO2WaterIsCollected AND PCO2AirIsCollected Then
        Call WritePCO2Tables
        Call ClosePC02
        UpdatePCO2Tables = true
    
        TAGString &= "\n" & PCO2TagString()
        ' Call WriteTagString

        PCO2IsSampling = false
      Else
        Call PCO2WatchDog
      EndIf
    
    ElseIf (PCO2_Last_Sampling + (PCO2_Interval_Hr*3600) - 60 <= Public.TimeStamp(1)) Then 'minus 60sec to not skip a scan planned at PCO2_Interval hour (got 3599s and didn't sampled)
      Call logging("PCO2 Ready to start.")
      Call StartPCO2  
    EndIf

  EndIf
EndSub

Sub ResetPCO2RawStrings
  If UpdatePCO2Tables Then
    Call logging("PCO2 String Resetted")
    RawPCO2_Air = ""
    RawPCO2_Water = ""
    PCO2WaterIsCollected = false
    PCO2AirIsCollected = false
  EndIf
EndSub
