' Winch related code
'
' IMPORTANT: WinchSerial is:
'                Opened in `StartWinchMission`
'                Closed in `CollectWinch` and in `WinchRountine` (if Winch failed to start)
'   When WinchStatus = "Standby", WinchSerial is closed. Unless opened with `Open_Winch_Serial_Override`
'   in `slow_sequences`/
'
' #################################
' Winch Communication
' Start a Winch: 
'    Command: Format: w<Date><Time><Latitude><Longitude>\r
'       `wyyyymmddHHMMSSDDMMmmmDDDMMmmm\r`
'    Returns:
'       `\n` + `<winch_file>.txt\n`
' Download Winch file:
'   Command:
'        `Read <winch_file>.txt\r`
'   Returns: All line ends with a new line \n)
'    ```
'   Reading file '<winch_file>.txt'
'    ---
'    <data>
'    <SuccesfullWinchMessage> 
'    ---
'    ```
' #################################
' Whinch constant were moved to buod_config.CR6
' Const Min_Air_Temp_for_Winch = 1
' Const Max_Wave_H13_for_Winch = 2
' Const Min_Wave_Period_for_Winch = 6
' Const Max_Flow_for_Winch = 1
' Const Max_Buoy_Speed_for_Winch = 1
' Const Min_Voltage_for_Winch = 12.2

Const SuccesfulWinchMessage = "CTD in the dock"
Const WinchMaxFileLength = 50000 ' Maximum number of lines of a file (Safety)  TODO CHANGE TO THE CORRECT VALUE
Public WinchString As String * 200

Public Winch_Conditions_ByPass As Boolean = false

Public OnWhichBattery As Long = ""
Public Winch_Voltage As Float = ""

Public WinchStatus As String * 10 = "Standby" 'Standby / Sampling / Completed
Public WinchMessage As String * 50
Public WinchMissingConditions As Long = 0


Public WinchFileName As String * 50
Dim Winch_Internal_File as String * 50 ' Probably too long
Dim WinchFileHandle As Long


Public Winch_Last_Sample AS Long = ""
' These could be Dims.
Public Winch_DateTime(2) As String : Alias Winch_DateTime = Winch_Date, Winch_Time  
Public Winch_Latitude As String
Public Winch_Longitude As String



Function WinchTagString as String * 36
    WinchTAGString = "[WNCH]" + WinchMessage
EndFunction

' ####################### Start Conditions ############################## 
Sub WinchAirCheck(Air_Temp)
    If Air_Temp < Min_Air_Temp_for_Winch Then
        WinchMessage = "Air temperature is too low"
        Call logging("Winch : " & WinchMessage)
        WinchMissingConditions += 1
    EndIf
EndSub

Sub WinchWaveCheck(WaveH13, WavePeriod)
    If WaveH13 > Max_Wave_H13_for_Winch Then
        WinchMessage = "Waves are too high"
        Call logging("Winch : " & WinchMessage)
        WinchMissingConditions += 1
    EndIf
        
    If WaveH13 > 1 AND WavePeriod < Min_Wave_Period_for_Winch  AND WavePeriod <> 0 Then 
        WinchMessage = "Wave period is too short"
        WinchMissingConditions += 1
    EndIf
EndSub

Sub WinchGPSCheck(SOG)
    If SOG > Max_Buoy_Speed_for_Winch Then
        WinchMessage = "Buoy is moving too fast"
        Call logging("Winch : " & WinchMessage)
        WinchMissingConditions += 1
    EndIf
EndSub

Sub WinchPowerCheck(VBatt1, VBatt2)
    OnWhichBattery = Mid(Power(11),4,1)
    If OnWhichBattery = 1 Then
        Winch_Voltage = VBatt1
    ElseIf OnWhichBattery = 2 Then
        Winch_Voltage = VBatt2
    EndIf
    
    If Winch_Voltage < Min_Voltage_for_Winch Then
        WinchMessage = "Voltage is too low"
        Call logging("Winch : " & WinchMessage)
        WinchMissingConditions += 1
    EndIf
EndSub

Sub WinchConditionsCheck
    WinchMissingConditions = 0
    
    If Winch_Conditions_ByPass Then
        Call logging("Winch Conditions Check ByPassed")
        ExitSub
    EndIf

    Call logging("Winch Condition Checks")
    
    If With_WXT536 Then
      Call WinchAirCheck(Air_Temp)
    EndIf
    
    If With_Wave Then
      Call WinchWaveCheck(WaveH13, WavePeriod) 
    EndIf
          
    If With_GPS Then
      Call WinchGPSCheck(SOG)
    EndIf
    
    If With_Power Then
      Call WinchPowerCheck(VBatt1, VBatt2)
    EndIf
EndSub


' ####################### Winch Mission Start ############################## 
Function make_winch_start_command(_latitude_ as String, _longitude_ as String) as String * 30
    ' Winch Start String: wyyyymmddHHMMSSDDMMmmmDDDMMmmm
    '                     w<Date><Time><Latitude><Longitude>
    ' Variables format
    ' _latitude_ : DDMM.mmmmm
    '  _longitude_ : DDDMM.mmmm
    SplitStr(Winch_DateTime, Public.TimeStamp(4), " ", 2, 5)
    Winch_Date = Replace(Winch_Date, "-", "")                  ' -> yyyymmdd 
    Winch_Time = Replace(Mid(Winch_Time, 1, 8), ":", "")       ' -> HHMMSS 
    Winch_Latitude = Mid(Replace(_latitude_, ".", ""), 1, 7)   ' -> DDMMmmm
    Winch_Longitude = Mid(Replace(_longitude_, ".", ""), 1, 8) ' -> DDDMMmmm
    return "w" & Winch_Date & Winch_Time & Winch_Latitude & Winch_Longitude
EndFunction


Sub StartWinch
    Dim X
    
    Call logging("Starting Winch")
    SerialOpen(SerialWinch,115200,3,10,100)
    Delay(1,100,mSec)
    SerialFlush(SerialWinch)
    SerialOut(SerialWinch, CHR(13), 0, 1, 10) ' will echo
    Delay(1,100,mSec)
    
    X=0
    While SerialInChk(SerialWinch) > 0 And X < 20
        SerialIn(WinchString,SerialWinch, 100,10,200)
        Call logging("(X=" & X & "): " & WinchString)
        X+=1
    Wend
EndSub


Sub StartWinchMission
    Dim X
    Dim winch_start_command as String * 30
        
    Call logging("Starting Winch Mission")    
    
    If Start_Winch_Mission_Override Then
        Call GetGpsPosition ' sets public var: `latitude_tmp`, `longitude_tmp`.
        winch_start_command = make_winch_start_command(latitude_tmp, longitude_tmp)
    Else
        ' The next scheduled winch time is only changed when its a scheduled winch.
        Winch_Last_Sample = Public.TimeStamp(1)
        winch_start_command = make_winch_start_command(GPS_Lat, GPS_Lon)
    EndIf

    Call logging("Winch Mission Start Command: " & winch_start_command)
    
    Call StartWinch ' Open Winch Serial 
    SerialOut(SerialWinch, winch_start_command & CHR(13), winch_start_command & CHR(13) & CHR(10),  1, 10)

    For X = 1 to 10
        SerialIn(WinchString,SerialWinch,100,10,200)
        WinchString = Mid(WinchString, 1, Len(WinchString) - 1) ' removing the '\r' 
        Call logging("WinchString (" & X & "): " & WinchString)
        If InStr(1, WinchString,".txt",2)  <> 0 Then ' "RKXXX.txt\r"
            Winch_Internal_File = Mid(WinchString, 1, Len(WinchString) - 4) ' ".txt\r"
            WinchStatus = "Sampling"
            ExitFor
        EndIf
    Next
EndSub

Sub WinchRoutine
    'Start a Winch Mission if its not Ongoing and possible.
    If With_Winch 
        Call logging("Entering Winch Routine")

        If Buoy_Adrift_Alert Then
            Call logging("Buoy Adrift Alert is ON. Winch Disabled.")
            WinchMessage = "Buoy Adrift"
            ExitSub
        EndIf

        If WinchStatus <> "Standby" Then ' Can't really be Completed.
            Call logging("Winch is Still Sampling")
            WinchMessage = "Mission in Progess"
            ExitSub
        EndIf
        
        If Not SBE37_In_Saltwater And Not Bypass_Salinity Then
            Call logging("Winch Routine Skipped due to low salinity.")
            WinchMessage = "Low Salinity"
            ExitSub
        EndIf
    
        If ((Winch_Last_Sample + Winch_Interval_Hr * 3600 - 60) > Public.TimeStamp(1)) AND NOT Start_Winch_Mission_Override Then
            ' Skipped if Start_Winch_Mission_Override is True.
            ' minus 60sec to not skip a scan planned at Winch_Interval hour (got 3599s and didn't sampled)
            WinchMessage = "Interval not reach"
            Call logging("Winch " & WinchMessage)
            ExitSub
        EndIf
                
        Call WinchConditionsCheck
        
        If WinchMissingConditions <> 0 Then
            Call logging("Winch Number of Missing Conditions: " & WinchMissingConditions)
            WinchMessage = "Missing Condition " & WinchMissingConditions
            ExitSub
        EndIf

        ' If this code is Reached, it means a winch should be started.
        Call StartWinchMission

        If WinchStatus = "Sampling" Then
            WinchMessage = "Mission Started"
            Call logging("Winch Mission was Started. Winch File: " &  Winch_Internal_File)
        Else
            WinchMessage = "Failed to Start"
            Call logging("Warning: Failed to Start Winch.")
            SerialClose(SerialWinch)
        EndIf
    EndIf
EndSub

' ####################### Collecting Data ##############################


Sub DownloadWinchFile
    Dim X as Long
    Dim Start_Delimiter_Found as Boolean = False
    Dim Raise_Winch_Mission_Error As Boolean = False
    Dim winch_download_command as String * 50

    Call logging("Downloadig Winch Data")

    Raise_Winch_Mission_Error = True ' Set to false if the SuccesfullWinchMessage is received.

    ' Init winch file.
    WinchFileName = "WDATA_"& Buoy_Name &"_"& Winch_Date & Winch_Time
    WinchFileHandle = FileOpen("CRD:"&WinchFileName&".txt","a",-1)
                
    ' Send Winch Download Command
    winch_download_command = "read " & Winch_Internal_File
    Call logging("Winch Download Command: " &  winch_download_command)
    SerialOut(SerialWinch,winch_download_command & CHR(13), winch_download_command & CHR(13) & CHR(10), 1, 10)
    
    ' Look for the file start delimiter (---)
    Start_Delimiter_Found = False
    For X = 1 to 10
        SerialIn(WinchString,SerialWinch,100,10,200)
        WinchString = Mid(WinchString, 1, Len(WinchString) - 1) ' removing the '\r' 
        Call logging("WinchString (" & X & "): " & WinchString)
        If InStr(1,WinchString,"---",2)  <> 0 Then ' Start of file delimiter
            Start_Delimiter_Found = True
            ExitFor
        EndIf
    Next
    
    ' Write every line until the stop delimiter is received.
    If Start_Delimiter_Found Then ' iF the delimiter was found.
        Raise_Winch_Mission_Error = True ' Flag is set to false once the SuccefulWInchMessage is received. Or the file is not downloaded properly. In which case a Download error is raised.
        X = 0
        Do While  X < WinchMaxFileLength ' failsafe.
            X+=1
            SerialIn(WinchString,SerialWinch,100,10, 200)
        
            If InStr(1, WinchString, SuccesfulWinchMessage, 2) <> 0 Then
                Raise_Winch_Mission_Error = False
            ElseIf InStr(1,WinchString,"---",2) <> 0 Then 'End of file delimiter reached'
                ExitDo
            ElseIf WinchString = "" Then
                Raise_Winch_Mission_Error = False
                Call logging("Empty String Received on Download")
                Call Set_Winch_Download_Error_Warning
                ExitDo
            EndIf

            FileWrite(WinchFileHandle,WinchString,0)            
        Loop

        ' Alarm is raise if the WinchMaxFileLength is reached
        If X = WinchMaxFileLength Then
            Call logging("Error: WinchMaxFileLength ("&WinchMaxFileLength&") Reached on Download.")
            Call Set_Winch_Download_Error_Warning
        EndIf
    EndIf

    FileClose(WinchFileHandle)

    Call logging("Winch File Downloaded -> " & WinchFileName)

    If Raise_Winch_Mission_Error Then
        Call Set_Winch_MIssion_Error_Warning
        Call logging("An Error occured during the winch mission.")
    EndIf
EndSub

Sub CheckWinchStatus
    ' Makes the WinchTagString from the current WinchMessage
    If With_Winch Then
        Call logging("Winch Statis Check")
        If WinchStatus = "Sampling" Then
            ' Winch Serial should be still open.
            SerialIn(WinchString,SerialWinch,100,10,200)
            If WinchString = "" Then
                WinchStatus = "Completed"
                WinchMessage = "Mission Completed"
            EndIf
        EndIf
        Call logging("Winch Status: " & WinchStatus)
        TAGString &= WinchTAGString()
    EndIf
EndSub

Sub CollectWinch
    If With_Winch Then
        Call logging("Entering Winch Collection")
        If WinchStatus = "Completed" Then
            Call DownloadWinchFile
            WinchStatus = "Standby"
            SerialClose(SerialWinch)
        Else
            Call logging("Nothing to download.")
        EndIf
    EndIf
    'Call logging("Winch Status: " & WinchStatus)
EndSub
