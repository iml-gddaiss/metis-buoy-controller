'#####################################################################################
'Date: 04 avril 2023
'Program author: Anthony Ouellet
'Modified by: Jerome Guay
'
' Notes: 
' TODO: faire des sub routine pour les commandes envoyer au instrument et le traitement
' TODO: Convention de nom entre variable, constante, table etc
'#####################################################################################
'------------------------------------------------------------------------------
'----------------------------- Main Program -----------------------------------
'------------------------------------------------------------------------------

''' Start sampling '''
'Close unused SerialPort on SDM
'Open 5V for the Water_Detection_Main
'Start Weather sensor
'Collect SBE37 to verify there's salt water -> Start pump
'Collect GPS data
'Start Triplet
'Start Flowmeter (not yet done)
'Collect Compass (60 samples / 2Hz)
'Collect Flowmeter (not yet done)
'Collect Water_Detection_Main
'Collect Power
'Collect ADCP (not yet done)
'Collect Triplet

''' After pump running min. 30sec '''
'Start SUNA
'Collect SBE37
'Collect Seafet
'Collect SUNA

''' After the weather station collected for min. 61sec '''
'Collect PAR
'Collect Weather (WMT700 & WXT536)
'Collect OCR ?

''' Before ending scan '''
'Collect Wave
'Collect PCO2 / Start sample / Delay sample
'Collect Winch / Start Winch / Delay Winch

''' Send data and End Scan '''

SequentialMode
AngleDegrees
PreserveVariables

'Tower instruments
'#T1 Anemometer WMT700
'#T2 Weather station WMXT536
'#T3 Compass DCM260B
'#T4 GPS 19xHVS
'#T5 PAR
'#T6 HyperOCR_I

'Well instruments
'#W1 CTD SBE37 w/ Pump SBE05
'#W2 SeaFet
'#W3 ECO-Triplet
'#W4 SUNA
'#W5 PCO2
'#W6 Flowmeter
'#W7 HyperOCR_R

'Miscellaneous instruments
'#M1 Wave monitor
'#M2 Water detection
'#M3 Power controller
'#M4 ADCP
'#M5 Winch

Public WhereAmI As String
Public TAGString As String * 200
Dim Well_Switch As Boolean
Dim Tower_Switch As Boolean
Dim Timer_Value(9) As Long : Alias Timer_Value = Weather_Timer, GPS_Timer, Well_Timer, Triplet_Timer, SUNA_Timer, RainReset_Timer, Tower_Timer
Dim NBR 'NBytesReturned ' 
Dim Buoy_Time(9) : Alias Buoy_Time = Buoy_Year, Buoy_Month, Buoy_Date, Buoy_Hour, Buoy_Minute, Buoy_Second, Buoy_Millisecond, Buoy_DayofWeek, Buoy_DayofYear
Public ScanDateTime As String

Dim TAGFile As Long
Dim WinchFile As Long
Dim ToTransmit As Long


' Const SerialTower = 32 'RS485 As WMT700(A), WXT536(2) & Compass(1)

'Instruments state
Include "CPU:buoy_config.cr6"                     '#   Declare Buoy Config
Include "CPU:serials.cr6"
Include "CPU:logging.cr6"                         '#   Logging module

' With_Tower_485 : Tower 485 com port TODO
Const With_Tower_485 = With_WXT536 + With_WMT700 + With_Compass       
' With_Tower : Tower Power TODO
Const With_Tower = With_PAR + With_WMT700 + With_Compass + With_OCR_I
' With_Well : Well Pump TODO
Const With_Well_Pump = With_SBE37 + With_Seafet + With_SUNA

Public Manual_Tower_Switch = false
Public Manual_Well_Switch = false

Public Send_Break_to_ADCP = false

Const WD_Channel = U1 'Voltage reading
Public Water_Detection_Main 


Sub OpenTAGSFiles(UTC_Date_Short, UTC_Time_Short)
  ToTransmit = FileOpen("CRD:" & Buoy_Name & "_" & UTC_Date_Short & UTC_Time_Short & ".dat","a",-1)
  TAGFile = FileOpen("CRD:" & Buoy_Name & "_TAGFile.txt","a",-1)
EndSub


Sub WriteTagString 'Use in imported CR6 Files
  FileWrite(TAGFile,TAGString & CHR(10),0)
  FileWrite(ToTransmit,TAGString & CHR(10),0)
EndSub




'###### DECLARING INSUTRMENTS #####
' Instrument serial a declered in their respective cr6 files.
Include "CPU:wmt700.cr6"                    '#T1 Declare WMT700
Include "CPU:wxt536.cr6"                    '#T2 Declare WXT536
Include "CPU:compass.cr6"                   '#T3 Declare Compass
Include "CPU:gps.cr6"                       '#T4 Declare GPS
Include "CPU:par.cr6"                       '#T5 Declare PAR
Include "CPU:sbe37.cr6"                     '#W1 Declare CTD SBE37 
Include "CPU:eco_triplet.cr6"               '#W2 Declare ECO-Triplet
Include "CPU:seafet.cr6"                    '#W3 Declare Seafet 
Include "CPU:suna.cr6"                      '#W4 Declare SUNA 
Include "CPU:pco2.cr6"                      '#W5 PCO2
Include "CPU:ocr.cr6"                '#W7 HyperOCR_R 
Include "CPU:wave_monitor.cr6"              '#M1 Wave_Monitor 
Include "CPU:power_controller.cr6"          '#M3 Power Controller
Include "CPU:adcp.cr6"                      '#M4 ADCP 

Include "CPU:winch.cr6"                     '#M5 Winch 

'####### Different processing past this point #######
'Wind compensation by Compass and GPS
Include "CPU:weather.cr6"                   ' Weather variables  

' Raw data from the instruments

DataTable (Raw,1,-1)
  DataInterval(0,0,Sec,10)
  Sample (1,RawR1_Wind,String)
  Sample (1,RawR2_Weather,String)
  Sample (1,RawR3_Rain,String)
  Sample (1,RawWMT700,String)
  Sample (1,RawGPS,String)
  Sample (1,RawPAR,String)  
  Sample (1,RawWave,String)
  Sample (1,RawPower,String)
  Sample (1,RawSBE37,String)
  Sample (1,RawTriplet,String)
  Sample (1,RawSeafet,String)  
  Sample (1,RawSUNADark,String)
  Sample (1,RawSUNALight,String)
  Sample (1,RawPCO2_Water,String)
  Sample (1,RawPCO2_Air,String)
  Sample (1,WinchMessage,String)
EndTable


Function InitTagString(UTC_Date_Hyphen, UTC_Time_DDot, Latitude, Longitude, Heading, Pitch, Roll, COG, SOG, Water_Detection_Main)
  ' Buoy TAG with name, GPS, Compass, Flow & WaterDetection
  InitTagString = "[INIT]" & Buoy_Name & "," & UTC_Date_Hyphen & "," & UTC_Time_DDot & "," & Latitude & "," & Longitude & "," & Heading & "," & Pitch & "," & Roll & "," & COG & "," & SOG & "," & Water_Detection_Main
EndFunction



Sub CloseCR6SerialPorts
  Dim SerialPort
  'Close all serial port on CR6 if still open except ADCP
  For SerialPort = 11 To 16 Step 1
    If SerialPort = SerialADCP Then
      'Do not close the ADCP port
    Else If SerialPort = 13 AND WinchMessage <> "Interval not reach" Then ' is this ok ? was not in Subroutine at the start of the program # JEROME FIXME
      'Do not close port
    Else
      SerialClose(SerialPort)
    EndIf
  Next SerialPort
EndSub


Sub CloseSDM4SerialPorts
  Dim SerialPort
  'Close all serial port on SDM4, except for PCO2 (40) which must stays on is PCO2 is sampling
  For SerialPort = 32 To 47 Step 1
    If SerialPort = SerialPCO2 AND PCO2_Sampling = true Then
    'Do not close the port
    Else
      SerialClose(SerialPort)
    EndIf
  Next SerialPort
EndSub


Sub StartWaterDetectionSensor
 '5V to the Water Detection sensor, sample taked at the end --------------------
  If With_WD_Main <> 0 Then
    PortSet(C4,1)
  EndIf
EndSub


Sub PowerTowerInstruments
  'Starting the weather instrument as soon as possible to stabilize the OCR, start the PAR sample and initialize the WMT700
  If With_Tower <> 0 Then  
      SW12(SW12_1,1)
      Tower_Switch = True
      Tower_Timer = Timer(7,Sec,0)  'WMT700 power up delay
      Call logging("Tower Instrument Powered Up")
  EndIf
EndSub


Sub StartTower485
  'Open the RS485 port if there's one of the intruments
  'Opening SDM and PAR (T5) voltage. 1sec before communication  
  If With_Tower_485 <> 0 Then
    SerialOpen(SerialTower,19200,51,20,500) 'for 2R! test
  EndIf
EndSub


Sub CloseTower485
  If With_Tower_485 <> 0 Then
    SerialClose(SerialTower)
    SW12(SW12_1,0)
    Tower_Switch = False
    WhereAmI = "Close Tower"
  EndIf	  
EndSub


Sub CheckWaterDetection
  If With_WD_Main <> 0 Then
    WhereAmI = "Check Water Detection"
    Water_Detection_Main = 0
    VoltSe(Water_Detection_Main,1,AutoRange,U1,0,0,15000,1,0)
    PortSet(C4,0)
  EndIf
EndSub


Sub StartWellPump(SBE37_In_SaltWater)
  'Starting pump
  If (SBE37_In_SaltWater OR Bypass_Salinity) AND ((With_Well_Pump <> 0 AND NOT Disable_Pump) OR With_OCR_R <> 0) Then
    WhereAmI = "Start Well Pump"
    Call logging("Starting Well Pump")
    'Open Switch #2 to control pump for X sec
    SW12(SW12_2,1)
    Well_Switch = True
    Timer(3,Sec,0) 'Start timer #3 for the pump working for min. 30 sec
  EndIf
EndSub


Sub CheckWellPump
  Dim WellTimer
  
  If Well_Switch AND (With_Well_Pump <> 0) Then
    WhereAmI = "See if pump is running 30sec"
    WellTimer = Timer(3,Sec,4)
    Timer(3,Sec,3) 'Timer #3 Stop and Reset
    If WellTimer < 30 Then
      Delay(1,30-WellTimer,Sec)
    EndIf
    WhereAmI = "Pump ran 30sec"
  EndIf
EndSub


Sub CloseWellPump
  WhereAmI = "Close pump"
  If Well_Switch = True Then
    SW12(SW12_2,0)
    Well_Switch = False
  EndIf
EndSub


Sub SamplePCO2
  Buoy_TimeStamp_1990 = Public.TimeStamp(1)
      
  'minus 10sec to not skip a scan planned at PCO2_Interval hour (got 3599s and didn't sampled)
  WhereAmI = "Start PCO2"
  If (PCO2_Last_Sample + (PCO2_Interval*60*60) - 10 <= Buoy_TimeStamp_1990) AND PCO2_Sampling = false Then
    ' WhereAmI = "Entering PCO2 Loop"
    Call StartPCO2
  EndIf
  
  If PCO2_Sampling = true Then
    'Watchdog if there's no data in 1Hour (if power disconnected during sampling)
                        'sec
    If (PCO2_Last_Sample + 3600) < Buoy_TimeStamp_1990 Then
      Call EmptyPCO2Table '  Change le nom #jerome July 2023
    Else
      Call CollectPCO2
      If RawPCO2_Water <> "" AND RawPCO2_Air <> "" Then 'TODO FIXME ME: VÃ©rifier avec Anthony. C'est la seule place qui n'envoie pas le tags en cas de NA data ? #jerome July 2023
        TAGString = "[PCO2]" & CO2_Water & "," & CO2_Air & "," & PCO2_Gaz_Pressure_Water & "," & PCO2_Gaz_Pressure_Air & "," & PCO2_Humidity
        Call WriteTagString
      EndIf
    EndIf 'If Else Watchdog
  EndIf 'If PCO2_Sampling is True
EndSub


Sub SampleWinch
  Buoy_TimeStamp_1990 = Public.TimeStamp(1)
  WinchMessage = "Entering the Winch Block"
  MissingCondition = 0
                        'minus 10sec to not skip a scan planned at Winch_Interval hour (got 3599s and didn't sampled)
  If (Winch_Last_Sample + (Winch_Interval*60*60) - 10 <= Buoy_TimeStamp_1990) AND Winch_Sampling = false Then
    WhereAmI = "Starting A Winch"
    If With_WXT536 <> 0 Then
      Call CheckWinchAir(Air_Temp) 'REPLACe BY FUNCTION TO INCREMENT MISSINGCONDITION
    EndIf
    
    If With_Wave <> 0 Then
      Call CheckWinchWave(Wave_H13, Wave_Period) 'REPLACe BY FUNCTION TO INCREMENT MISSINGCONDITION
    EndIf
          
    If With_GPS <> 0 Then
      Call CheckWinchGPS(SOG) 'REPLACe BY FUNCTION TO INCREMENT MISSINGCONDITION
    EndIf
    
    If With_Power <> 0 Then
      Call CheckWinchPower(VBatt1, VBatt2) 'REPLACe BY FUNCTION TO INCREMENT MISSINGCONDITION
    EndIf

    If MissingCondition = 0 Then
      Call StartWinch(Buoy_TimeStamp_1990, GPS_Date, UTC_Date_Hyphen, UTC_Time_Short, UTC_Time_DDot, Lat, Lon, Lat_Hem, Lon_Hem) 
    EndIf
  
  Else If Winch_Sampling = True Then
    WhereAmI = "Check if the winch is done"
    Call CheckWinch
  Else
    WinchMessage = "Interval not reach"
  EndIf  
  
  TAGString = "[WNCH]" + WinchMessage
  Call WriteTagString
EndSub


BeginProg
  'This is turning the Wifi Off
  SetSetting("WIFIconfig",4)

  Call CloseCR6SerialPorts
      
  Call CloseSDM4SerialPorts

  Call StartADCP        ' why is this not after the Scan ? # Jerome
  
  Scan(Buoy_Interval,Min,0,0)
  ScanDateTime = Public.TimeStamp(4,0)
  WhereAmI = "Initializing instrument"

  Call logging("Scan Start: ")
    
  Call StartWaterDetectionSensor
      
  Call PowerTowerInstruments

  Call StartPAR

  Call StartTower485

  Call SampleGPS
  
  Call StartWXT536

  Call StartWMT700
  
  'Start Timer#1 to collect data in 61sec
  'Note make invidual timers. For each instruments
  If With_WXT536 <> 0 OR With_WMT700 <> 0 OR With_PAR <> 0 Then
    Timer(1,Sec,0) ' TODO Start_WeatherTimer ?
  EndIf

  Call SBE37SalinityCheck
    
  Call StartWellPump(SBE37_In_Saltwater)
  
  Call StartTriplet
  
  Call SampleCompass
  
  Call CheckWaterDetection

  Call OpenTAGSFiles(UTC_Date_Short, UTC_Time_Short)
  
  TAGString = InitTagString(UTC_Date_Hyphen, UTC_Time_DDot, Latitude, Longitude, Heading, Pitch, Roll, COG, SOG, Water_Detection_Main)
  Call WriteTagString
    
  Call SamplePowerController(TAGString)

  Call CollectTriplet(TAGString)
     
  Call CheckWellPump   'Pumped sensor (SBE37, Seafet & SUNA) 

  Call StartSUNA
  
  Call SampleOCRs(Well_Switch)  
  
  Call SampleSBE37(TAGString)
  
  Call SampleSeafet(TAGString, Water_Temp, Salinity)

  Call CollectSUNA(TAGString)

  Call CloseWellPump 'Pumped sensor are done, close pump
    
  'PAR and Delay for WMT700 and WXT536 ------------------------------------------
  WhereAmI = "See if weather is done"
  If With_PAR <> 0 OR With_WMT700 <> 0 OR With_WXT536 <> 0 Then
    Timer(1,Sec,1)' Weather_Timer
    Weather_Timer = Timer(1,Sec,4)
    'Delay to make sure the instruments are sampling for at 61sec
    If Weather_Timer < 61 Then  
      Delay (1,61-Weather_Timer,Sec)
      EndIf
    Timer(1,Sec,3) 'Stop and reset on Timer#1
  EndIf
    
  Call CollectPAR

  Call CollectWXT536
  
  Call CollectWMT700
  
  Call CloseTower485

  'Creating Weather file if Wind, GPS & Compass ---------------------------------   
  
  Call SelectWeatherInstrument   
      
  Call CollectWeather(TAGString, GPS_SOG_X, GPS_SOG_Y, Roll, Pitch)     

  Call CollectWave(TAGString)           

  Call CollectADCP(TAGString)
  
  'PCO2 -------------------------------------------------------------------------
  If With_PCO2 <> 0 AND (Salinity > 10 OR Bypass_Salinity = True) Then 'Security for PCO2 pump if not in water
    Call SamplePCO2
  EndIf 'If there's a PCO2 and salinity (or bypass)
    

  'Winch -------------------------------------------------------------------------
  If With_Winch <> 0 AND (Salinity > 10 OR Bypass_Salinity = True) Then
    Call SampleWinch
  EndIf

  Call CloseCR6SerialPorts

  Call CloseSDM4SerialPorts        
  
  CallTable Raw

  If RawPCO2_Air <> "" AND RawPCO2_Water <> "" Then
    RawPCO2_Air = ""
    RawPCO2_Water = ""
  EndIf
  
  TAGString = "[END]"
  Call WriteTagString
  
  TAGString = ""
  Call WriteTagString
  
  FileClose(TAGFile)
  FileClose(ToTransmit)

  CollectWinch
  
  WhereAmI = "Scan end"
  NextScan
	
  SlowSequence
    Scan(1,Sec,0,0)
      If Manual_Tower_Switch = true AND Tower_Switch = false Then
        SW12(SW12_1,1)
        Tower_Switch = true
      EndIf
        
      If Manual_Tower_Switch = false AND Tower_Switch = true Then
        SW12(SW12_1,0)
        Tower_Switch = false
      EndIf
      
      If Manual_Well_Switch = true AND Well_Switch = false Then
        SW12(SW12_2,1)
        Well_Switch = true
      EndIf
        
      If Manual_Well_Switch = false AND Well_Switch = true Then
        SW12(SW12_2,0)
        Well_Switch = false
      EndIf
      
      If Send_Break_to_ADCP = true Then
        SerialBrk(SerialADCP,200)
        Send_Break_to_ADCP = false
      EndIf
    NextScan
EndProg


