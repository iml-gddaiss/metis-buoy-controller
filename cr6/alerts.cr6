' Alerts
' + Buoy lon/lat outside range -> Buoy off chain. Drifting | Persistent until snoozed. Send Position and SOG/COG
' + Battery Low, Water Infiltration, Winch Failed/TimedOut  -> Send once until the flag is reset. (Breaker tripped)
' + Instrument Failed sampling. Each time. 

Const EarthRadius = 6371e3
Const _PI_ = 3.141592653589793

' Alert & Warnig Switch for the user to turn on/off
Public Buoy_Adrift_Alert As Boolean = False 
' -> Once the alert is set, the buoy is considered adrift until resetted to false.
'    That way, the email will continue to be sent even if the buoy return within the acceptable range.
Public Buoy_Adrift_Alert_Snoozed As Boolean = False 
' -> Snoozing will only stop the Emails, the buoy is still considere adrift.
Public PositionDeviation As Long


Public Battery_Low_Warning As Boolean = False
Public Water_Infiltration_Warning As Boolean = False
Public Winch_Failed_Warning As Boolean = False
Public Winch_Download_TimedOut_Warning As Boolean = False

Dim SaveLog as Boolean = False ' Save log on Failed instrument sampling.

Dim Instrument_Failed_Warnings(15) As Boolean = False
Alias Instrument_Failed_Warnings = ADCP_Warning, Compass_Warning, Triplet_Warning, GPS_Warning, OCR_R_Warning, _
                            OCR_I_Warning, PAR_Warning,PCO2_Warning, Power_Controller_Warning, SBE37_Warning, _
                            Seafet_Warning, Suna_Warning, Wave_Warning, WMT700_Warning, WXT536_Warning

Function ComputePositionDeviation As Float
    ' Uses Haversine Equation
    'Compute the distance of the current position (Latitude_Decimal, Longitude_Decimal) to  (Longitude_0, Latitude_0)
    Dim a As Float = ""
    Dim c As Float = ""

    a = (SIN((Latitude_Decimal - Latitude_0)/2))^2 + COS(Latitude_Decimal) * COS(Latitude_0) * (SIN((Longitude_Decimal - Longitude_0)/2))^2 ' the difference with python is probably due to numerical precision
    c = 2*ATN2(SQR(a), SQR(1-a)) * ( _PI_ / 180) ' This should be fine
    ComputePositionDeviation =  EarthRadius * c
EndFunction

Sub Buoy_Adrift_Check ' Seems to work. Proper test needed
    PositionDeviation = ComputePositionDeviation()
    Call logging("Position Deviation: " & PositionDeviation & " m.")
    If Not Buoy_Adrift_Alert Then
        If PositionDeviation > Allowed_Position_Deviation_m Then 
            Buoy_Adrift_Alert = True
        EndIf
    EndIf

    If Buoy_Adrift_Alert Then
        Call logging("ALERT Buoy Adrift")    
        Call Set_Buoy_Adrift_Alarm
    EndIf
EndSub

Sub Set_Buoy_Adrift_Alarm
' Buoy Adrift Alarm will keep sending email until it is snoozed.
    If Not Buoy_Adrift_Alert_Snoozed Then
        'FIXME TEST IF UNITS OF SOG AND COG Follow
        Call Email_Init(1, "BUOY ADRIFT")
        Call Email_add_line("Lat: " & Latitude)
        Call Email_add_line("Lon: " & Longitude)
        Call Email_add_line("SOG: " & SOG)
        Call Email_add_line("COG: " & COG)
        Call SendEmail
    EndIf
EndSub


Sub Set_Winch_Failed_Warning
' Failed Winch Warning will only send one email when set. The alarm need
' be turned off by the user and set again for a new email to be sent.
    If Not Winch_Failed_Warning Then
        Call Email_Init(0, "Winch Failed")
        Call SendEmail

        Winch_Failed_Warning = True
    EndIf
EndSub


Sub Set_Winch_Download_TimedOut_Warning
' Failed Winch Warning will only send one email when set. The alarm need
' be turned off by the user and set again for a new email to be sent.
    If Not Winch_Download_TimedOut_Warning Then
        Call Email_Init(0, "Winch Download Timed Out")
        Call SendEmail

        Winch_Download_TimedOut_Warning = True
    EndIf
EndSub


Sub Set_Water_Infiltration_Warning
' Water Infiltration Warning will only send one email when set. The alarm
' need be turned off by the user and set again for a new email to be sent.
    If Not Water_Infiltration_Warning Then
        Call Email_Init(0, "Water Infiltration")
        Call Email_add_line("Water Detection: " &  Water_Detection_Main)
        Call SendEmail

        Water_Infiltration_Warning = True
    EndIf
EndSub


Sub Set_Battery_Low_Warning
' Battery Low Warning will only send one email when set. The alarm need
' be turned off by the user and set again for a new email to be sent.
    If Not Battery_Low_Warning Then
        Call Email_Init(0, "Battery Low")
        Call Email_add_line("VBatt1: " & VBatt1)
        Call Email_add_line("VBatt2: " & VBatt2)
        Call SendEmail

        Battery_Low_Warning = True
    EndIf
EndSub


Sub Failed_Sampling_Warning(_instrument_ As String * 50)
    ' Arguments
    ' ---------
    ' _instrument_ values: 
    '    ADCP, Compass, Triplet, GPS, OCR-R, OCR-I, PAR, PCO2, Power Conttroller,
    '    SBE37, Seafet, Suna, Wave, WMT700, WXT536
    '
    ' Notes
    ' -----
    ' Set the `Reset_Instrument_Warnings_Switch` flag to true to reset the instrument_warning
    Select Case _instrument_
        Case "ADCP" AND NOT ADCP_Warning
            Call Email_Init(0, _instrument_ & " sampling failed."):Call SendEmail
            ADCP_Warning = True
            SaveLog = True
        Case "Compass" AND NOT Compass_Warning
            Call Email_Init(0, _instrument_ & " sampling failed."):Call SendEmail
            Compass_Warning = True
            SaveLog = True
        Case "Triplet" AND NOT Triplet_Warning
            Call Email_Init(0, _instrument_ & " sampling failed."):Call SendEmail
            Triplet_Warning = True
            SaveLog = True
        Case "GPS" AND NOT GPS_Warning
            Call Email_Init(0, _instrument_ & " sampling failed."):Call SendEmail
            GPS_Warning = True
            SaveLog = True
        Case "OCR-R" AND NOT OCR_R_Warning
            Call Email_Init(0, _instrument_ & " sampling failed."):Call SendEmail
            OCR_R_Warning = True
            SaveLog = True
        Case "OCR-I" AND NOT OCR_I_Warning
            Call Email_Init(0, _instrument_ & " sampling failed."):Call SendEmail
            OCR_I_Warning = True
            SaveLog = True
        Case "PAR" AND NOT PAR_Warning
            Call Email_Init(0, _instrument_ & " sampling failed."):Call SendEmail
            PAR_Warning = True
            SaveLog = True
        Case "PCO2" AND NOT PCO2_Warning
            Call Email_Init(0, _instrument_ & " sampling failed."):Call SendEmail
            PCO2_Warning = True
            SaveLog = True
        Case "Power Controller" AND NOT Power_Controller_Warning
            Call Email_Init(0, _instrument_ & " sampling failed."):Call SendEmail
            Power_Controller_Warning = True
            SaveLog = True
        Case "SBE37" AND NOT SBE37_Warning
            Call Email_Init(0, _instrument_ & " sampling failed."):Call SendEmail
            SBE37_Warning = True
            SaveLog = True
        Case "Seafet" AND NOT Seafet_Warning
            Call Email_Init(0, _instrument_ & " sampling failed."):Call SendEmail
            Seafet_Warning = True
            SaveLog = True
        Case "Suna" AND NOT Suna_Warning
            Call Email_Init(0, _instrument_ & " sampling failed."):Call SendEmail
            Suna_Warning = True
            SaveLog = True
        Case "Wave" AND NOT Wave_Warning
            Call Email_Init(0, _instrument_ & " sampling failed."):Call SendEmail
            Wave_Warning = True
            SaveLog = True
        Case "WMT700" AND NOT WMT700_Warning
            Call Email_Init(0, _instrument_ & " sampling failed."):Call SendEmail
            WMT700_Warning = True
            SaveLog = True
        Case "WXT536" AND NOT WXT536_Warning
            Call Email_Init(0, _instrument_ & " sampling failed."):Call SendEmail
            WXT536_Warning = True
            SaveLog = True
    EndSelect
EndSub
