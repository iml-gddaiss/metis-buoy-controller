'#####################################################################################
'Date: 04 avril 2023
'Program author: Anthony Ouellet
'Modified by: Jerome Guay
'
' Notes: 
' Sample<> subroutine Call the data file table.
' Start<> subroutine only start the insturment sampling. A later call to Collect<> subroutine is required to call the data table.
'Installed in the buoy, pre-deployment
'#####################################################################################

SequentialMode
AngleDegrees
PreserveVariables

'Tower instruments
'#T1 Anemometer WMT700
'#T2 Weather station WMXT536
'#T3 Compass DCM260B
'#T4 GPS 19xHVS
'#T5 PAR
'#T6 HyperOCR_I

'Well instruments
'#W1 CTD SBE37 w/ Pump SBE05
'#W2 SeaFet
'#W3 ECO-Triplet
'#W4 SUNA
'#W5 PCO2
'#W6 Flowmeter
'#W7 HyperOCR_R

'Miscellaneous instruments
'#M1 Wave monitor
'#M2 Water detection
'#M3 Power controller
'#M4 ADCP
'#M5 Winch
Const Yes = True
Const No = False

Public WhereAmI As String
Public TAGString As String * 200
Dim Well_Switch As Boolean
Dim Tower_Switch As Boolean
Dim Timer_Value(9) As Long : Alias Timer_Value = Weather_Timer, GPS_Timer, Well_Timer, Triplet_Timer, SUNA_Timer, RainReset_Timer, Tower_Timer
Dim NBR 'NBytesReturned
Dim Buoy_Time(9) : Alias Buoy_Time = Buoy_Year, Buoy_Month, Buoy_Date, Buoy_Hour, Buoy_Minute, Buoy_Second, Buoy_Millisecond, Buoy_DayofWeek, Buoy_DayofYear
Public ScanDateTime As String

Dim TAGFile As Long
Dim WinchFile As Long
Dim ToTransmit As Long

Dim SerialPort

Const SerialTower = 32 'RS485 As WMT700(A), WXT536(2) & Compass(1)

'Instruments state
Include "CPU:buoy_config.cr6"                     '#   Declare Buoy Config

Const With_Tower = With_WXT536 + With_WMT700 + With_Compass          '# Jerome
Const With_Well = With_SBE37 + With_Seafet + With_SUNA           '#Jerome

Public Manual_Tower_Switch = false
Public Manual_Well_Switch = false

Public Send_Break_to_ADCP = false

Const WD_Channel = U1 'Voltage reading
Public Water_Detection_Main 

'###### DECLARING INSUTRMENTS #####
' Instrument serial a declered in their respective cr6 files.
Include "CPU:tower.cr6"                     '#   Declare Tower
Include "CPU:wmt700.cr6"                    '#T1 Declare WMT700
Include "CPU:wtx536.cr6"                    '#T2 Declare WMT536
Include "CPU:compass.cr6"                   '#T3 Declare Compass
Include "CPU:gps.cr6"                       '#T4 Declare GPS
Include "CPU:par.cr6"                       '#T5 Declare PAR
Include "CPU:ocri.cr6"                      '#T6 Declare HyperOCR_I 
Include "CPU:sbe37.cr6"                     '#W1 Declare CTD SBE37 
Include "CPU:eco_triplet.cr6"               '#W2 Declare ECO-Triplet
Include "CPU:seafet.cr6"                    '#W3 Declare Seafet 
Include "CPU:suna.cr6"                      '#W4 Declare SUNA 
Include "CPU:pco2.cr6"                      '#W5 PCO2
'#W6 Flowmeter Todo ? Useless ?
Include "CPU:hyper_ocr_r.cr6"               '#W7 HyperOCR_R 
Include "CPU:wave_monitor.cr6"              '#M1 Wave_Monitor 
Include "CPU:power_controller.cr6"          '#M3 Power Controller
Include "CPU:adcp.cr6"                      '#M4 ADCP 
Include "CPU:winch.cr6"                     '#M5 Winch 

'####### Different processing past this point #######
'Wind compensation by Compass and GPS
Include "CPU:weather.cr6"                   ' Weather variables  

'------------------------------------------------------------------------------
'----------------------------- Main Program -----------------------------------
'------------------------------------------------------------------------------

''' Start sampling '''
'Close unused SerialPort on SDM
'Open 5V for the Water_Detection_Main
'Start Weather sensor
'Collect SBE37 to verify there's salt water -> Start pump
'Collect GPS data
'Start Triplet
'Start Flowmeter (not yet done)
'Collect Compass (60 samples / 2Hz)
'Collect Flowmeter (not yet done)
'Collect Water_Detection_Main
'Collect Power
'Collect ADCP (not yet done)
'Collect Triplet

''' After pump running min. 30sec '''
'Start SUNA
'Collect SBE37
'Collect Seafet
'Collect SUNA

''' After the weather station collected for min. 61sec '''
'Collect PAR
'Collect Weather (WMT700 & WXT536)
'Collect OCR ?

''' Before ending scan '''
'Collect Wave
'Collect PCO2 / Start sample / Delay sample
'Collect Winch / Start Winch / Delay Winch

''' Send data and End Scan '''


BeginProg
  'This is turning the Wifi Off
  SetSetting("WIFIconfig",4)

  Call CloseCR6SerialPorts
      
  Call CloseSDM4SerialPorts

  Call StartADCP        
  
  Scan(Buoy_Interval,Min,0,0)
  ScanDateTime = Public.TimeStamp(4,0)
  WhereAmI = "Initializing instrument"
    
  Call StartWaterDetectionSensor
      
  'Starting the weather instrument as soon as possible to stabilize the OCR, start the PAR sample and initialize the WMT700
  Call StartWeatherInstruments

  'GPS (T4) --------------------------------------------------------------------
  WhereAmI = "Sample GPS"
  If With_GPS <> 0 Then
    Call SampleGPS
  EndIf
  WhereAmI = "EndGPS, start Start Tower"


  'WXT536 (T2) Start sampling ---------------------------------------------------
  If With_WXT536 <> 0 Then
    Call StartWXT536
  EndIf 'With_WXT536


  If With_WMT700 <> 0 Then
    Call StartWMT700
  EndIf
    
  'Start Timer#1 to collect data in 61sec
  If With_WXT536 <> 0 OR With_WMT700 <> 0 OR With_PAR <> 0 Then
    Timer(1,Sec,0)
  EndIf


  'CTD SBE37 (W1) in salt water to start pump -----------------------------------
  'Rewrite security so it won't try to sample the CTD if Bypass_Salinity or Disable_Pump are True
  ' REVIEW THIS TODO
  If With_SBE37 <> 0 Then
    Call StartSBE37
  EndIf 'With_SBE37
    
  ' FIXME Starting pump ?? Testing pump ?
  If (Salinity > 10 OR Bypass_Salinity = Yes) AND ((With_Well <> 0 AND Disable_Pump = No) OR With_OCR_R <> 0) Then
    Call StartWellPump
  EndIf

        
  'ECO-Triplet/w (W3) Start sample ----------------------------------------------
  WhereAmI = "Start Triplet"
  If With_Triplet <> 0 Then
    Call StartTriplet
  EndIf

  'Flowmeter (W6) Start sample -------------------------------------------------- # ? Jerome


  'Compass (T3) -----------------------------------------------------------------
  WhereAmI = "Sample Compass"     ' Use to be after the Delay call in SampleCompass. #Jerome
  If With_Compass <> 0 Then
    Call SampleCompass
  EndIf 'With_Compass
  WhereAmI = "End Compass, collect power"

  'Flowmeter (W6) collect ------------------------------------------------------- # ? Jerome


  'Water Detection ---------------------
  WhereAmI = "Check Water Detection"
  If With_WD_Main <> 0 Then
    Call CheckWaterDetection
  EndIf

  'Buoy TAG with name, GPS, Compass, Flow & WaterDetection
  TAGString = "[INIT]" & Buoy_Name & "," & UTC_Date_Hyphen & "," & UTC_Time_DDot & "," & Latitude & "," & Longitude & "," & Heading & "," & Pitch & "," & Roll & "," & COG & "," & SOG & "," & Water_Detection_Main
  ToTransmit = FileOpen("CRD:" & Buoy_Name & "_" & UTC_Date_Short & UTC_Time_Short & ".dat","a",-1)
  TAGFile = FileOpen("CRD:" & Buoy_Name & "_TAGFile.txt","a",-1)
  Call WriteTagString
  
  'Power (M3) -------------------------------------------------------------------
  WhereAmI = "Sample Power Controller"
  If With_Power <> 0 Then
    Call SamplePowerController
    TAGString = "[POWR]" & VBatt1 & "," & ABatt1 & "," & VBatt2 & "," & ABatt2 & "," & VSolar & "," & ASolar & "," & AMain & "," & ATurbine & "," & AWinch & "," & PM_RH & "," & PowerString(11)
    Call WriteTagString
  EndIf
  WhereAmI = "End Power Controller"

  'ECO-Triplet/w (W3) collect ---------------------------------------------------
  WhereAmI = "Collect triplet"
  If With_Triplet <> 0 Then
    Call CollectTriplet
    TAGString = "[TRP1]" & Scattering & "," & Chlorophyll & "," & FDOM
    Call WriteTagString
  EndIf 'With_Triplet
  WhereAmI = "End Triplet"
      
  '------------------------------------------------------------------------------
  'Pumped sensor (SBE37, Seafet & SUNA) -----------------------------------------
  WhereAmI = "See if pump is running 30sec"
  ' If Well_Switch = True AND (With_SBE37 + With_Seafet + With_SUNA) <> 0 Then # Jerome July 2023
  If Well_Switch = True AND (With_Well <> 0) Then
    Call CheckWellPump 
  EndIf 
  WhereAmI = "Pump ran 30sec"

  'SUNA (W4) start --------------------------------------------------------------
  WhereAmI = "Starting SUNA"
  If With_SUNA <> 0 Then
    Call StartSUNA
  EndIf
      
  'Collect OCR_R ----------------------------------------------------------------
  WhereAmI = "Sample HyperOCRR"
  If With_OCR_R <> 0 AND Well_Switch = True Then
    Call SampleHyperOCRR
  EndIf
  WhereAmI = "End HyperOCRR"


  'Collect OCR_I ---------------
  WhereAmI = "Sample OCRI"
  If With_OCR_I <> 0 Then
    Call SampleOCRI
  EndIf
  WhereAmI = "End OCRI"
      
  'SBE37 (W1) -------------------------------------------------------------------
  WhereAmI = "Collecting CTD"
  If With_SBE37 <> 0 Then
    Call CollectSBE37
    TAGString = "[CTD]" & Water_Temp & "," & Conductivity & "," & Salinity & "," & Density
    Call WriteTagString
  EndIf
  WhereAmI = "CTD's finished"
    
  'Seafet (W2) --------------------------------------------------------------------
  WhereAmI = "Sample Seafet"
  If With_Seafet <> 0 Then
    Call SampleSeafet
    Call WriteTagString
  EndIf 'With_Seafet
  WhereAmI = "End Seafet"


  'SUNA (W4) collect data ------------------------------------------------------------
  WhereAmI = "Collecting SUNA"
  If With_SUNA <> 0 Then
    Call CollectSUNA
  EndIf
  WhereAmI = "End SUNA"

  'Pumped sensor are done, close pump -------------------------------------------
  WhereAmI = "Close pump"
  If Well_Switch = True Then
    Call CloseWellPump
  EndIf
    
  'PAR and Delay for WMT700 and WXT536 ------------------------------------------
  WhereAmI = "See if weather is done"
  If With_PAR <> 0 OR With_WMT700 <> 0 OR With_WXT536 <> 0 Then
    Timer(1,Sec,1)' Weather_Timer
    Weather_Timer = Timer(1,Sec,4)
    'Delay to make sure the instruments are sampling for at 61sec
    If Weather_Timer < 61 Then  
      Delay (1,61-Weather_Timer,Sec)
      EndIf
    Timer(1,Sec,3) 'Stop and reset on Timer#1
  EndIf
    
  WhereAmI = "Collect PAR"
  If With_PAR <> 0 Then
    Call CollectPAR
  EndIf
    

  'WMT700 and WXT536 Polling Sample--- ------------------------------------------
  WhereAmI = "Collect WXT536"
  If With_WXT536 <> 0 Then
    Call CollectWXT536
  EndIf
  WhereAmI = "Finish WXT536"

  WhereAmI = "Collect WMT700"                                                                     '      
  If With_WMT700 <> 0 Then    
    Call CollectWMT700
  EndIf
  WhereAmI = "Finish WMT700"
    
  'Closing Tower's Serial -----------
  If With_Tower <> 0 Then
    SerialClose(SerialTower)
    SW12(SW12_1,0)
    Tower_Switch = False
    WhereAmI = "Close Tower"
  EndIf	  

  'Creating Weather file if Wind, GPS & Compass ---------------------------------   
  WhereAmI = "Processing Weather"
  Call SelectWindInstrument   
      
  If (With_WMT700 <> 0 OR With_WXT536 <> 0) AND With_GPS <> 0 AND Pitch <> "NAN" AND Roll <> "NAN" Then 
    Call ProcessWeather
    
    TAGString = WindTAG & Wind_Dir_Min & "," & Wind_Dir_Ave & "," & Wind_Dir_Max & "," & Wind_Spd_Min & "," & Wind_Spd_Ave & "," & Wind_Spd_Max
    Call WriteTagString
    
    TAGString = "[ATMS]" & Air_Temp & "," & Air_Humidity & "," & Air_Pressure & "," & PAR & "," & Rain_Total & "," & Rain_Duration & "," & Rain_Intensity
    Call WriteTagString
  EndIf 'Creating weather file
  WhereAmI = "Finish Weather"
      

  'Wave -------------------------------------------------------------------------
  RawWave = ""
  WhereAmI = "Collect Wave"
  If With_Wave <> 0 Then
    Call CollectWave    
    TAGString = "[WAVE]" & Wave_Date & "," & Wave_Time & "," & Wave_Period & "," & Wave_Hm0 & "," & Wave_H13 & "," & Wave_Hmax
    FileWrite(ToTransmit,TAGString,0)
    FileWrite(TAGFile,TAGString,0)
  EndIf
  WhereAmI = "Finish Wave"
       

'ADCP -------------------------------------------------------------------------
  If With_ADCP <> 0 Then
    Call SampleADCP
    TAGString = ADCPTagString()
    Call WriteTagString  
  EndIf
      

  'PCO2 -------------------------------------------------------------------------
  If With_PCO2 <> 0 AND (Salinity > 10 OR Bypass_Salinity = True) Then 'Security for PCO2 pump if not in water
    Buoy_TimeStamp_1990 = Public.TimeStamp(1)
    
    'minus 10sec to not skip a scan planned at PCO2_Interval hour (got 3599s and didn't sampled)
    WhereAmI = "Start PCO2"
    If (PCO2_Last_Sample + (PCO2_Interval*60*60) - 10 <= Buoy_TimeStamp_1990) AND PCO2_Sampling = false Then
      ' WhereAmI = "Entering PCO2 Loop"
      Call StartPCO2
    EndIf
    
    If PCO2_Sampling = true Then
      'Watchdog if there's no data in 1Hour (if power disconnected during sampling)
                          'sec
      If (PCO2_Last_Sample + 3600) < Buoy_TimeStamp_1990 Then
        Call EmptyPCO2 '  Change le nom #jerome July 2023
      Else
        Call CollectPCO2
        If RawPCO2_Water <> "" AND RawPCO2_Air <> "" Then 'TODO FIXME ME: Vérifier avec Anthony. C'est la seule place qui n'envoie pas le tags en cas de NA data ? #jerome July 2023
          TAGString = "[PCO2]" & CO2_Water & "," & CO2_Air & "," & PCO2_Gaz_Pressure_Water & "," & PCO2_Gaz_Pressure_Air & "," & PCO2_Humidity
          Call WriteTagString
        EndIf
      EndIf 'If Else Watchdog
    EndIf 'If PCO2_Sampling is True
  EndIf 'If there's a PCO2 and salinity (or bypass)
    

  'Winch -------------------------------------------------------------------------
  If With_Winch <> 0 AND (Salinity > 10 OR Bypass_Salinity = Y) Then
    Buoy_TimeStamp_1990 = Public.TimeStamp(1)
    WinchMessage = "Entering the Winch Block"
    MissingCondition = 0
                          'minus 10sec to not skip a scan planned at Winch_Interval hour (got 3599s and didn't sampled)
    If (Winch_Last_Sample + (Winch_Interval*60*60) - 10 <= Buoy_TimeStamp_1990) AND Winch_Sampling = false Then
      WhereAmI = "Starting A Winch"
    
      If With_WXT536 <> 0 AND Air_Temp < Min_Air_Temp_for_Winch Then
        MissingCondition = MissingCondition + 1
        WinchMessage = "The air temperature is too cold"
      EndIf
      
      If With_Wave <> 0 Then
        If Wave_H13 > Max_Wave_H13_for_Winch Then
          MissingCondition = MissingCondition + 1
          WinchMessage = "Average wave is too high"
        EndIf
        If Wave_H13 > 1 AND Wave_Period < Min_Wave_Period_for_Winch  AND Wave_Period <> 0 Then
          MissingCondition = MissingCondition + 1
          WinchMessage = "Wave period is too short"
        EndIf
      EndIf
            
      If With_GPS <> 0 AND SOG > Max_Buoy_Speed_for_Winch Then
        MissingCondition = MissingCondition + 1
        WinchMessage = "The buoy is moving too fast"
      EndIf
      
      If With_Power <> 0 Then
        OnWhichBattery = Mid(PowerString(11),4,1)
        If OnWhichBattery = 1 Then
          Winch_Voltage = VBatt1
        Else If OnWhichBattery = 2 Then
          Winch_Voltage = VBatt2
        EndIf
        If Winch_Voltage < Min_Voltage_for_Winch Then
          MissingCondition = MissingCondition + 1
          WinchMessage = "The Winch voltage is too low"
        EndIf
      EndIf

      If MissingCondition = 0 Then
        SerialOpen(SerialWinch,19200,3,20,100)
        WinchString = ""
        SerialFlush(SerialWinch)
        Delay(1,500,mSec)
        SerialIn(WinchString,SerialWinch,100,10,60)
        If WinchString = "" Then
          SerialOut(SerialWinch,CHR(13),"",1,0)
          SerialOut(SerialWinch,"p1"&CHR(13)&CHR(10),.,2,300)
          Delay(1,2,Sec)
          SerialFlush(SerialWinch)
          SerialIn(WinchString,SerialWinch,100,10,100)
          SerialOut(SerialWinch,"p0"&CHR(13)&CHR(10),.,2,300)
          If Mid(WinchString,1,3) = "[S]" Then 'If String received from ctd
            SerialOut(SerialWinch,"X"&CHR(13)&CHR(10),"[W]1B>Operation Complete",2,200)
            SerialOut(SerialWinch,"R"&CHR(13)&CHR(10),"[W]09>Top Switch Activated",3,1000)
            SerialOut(SerialWinch,"K"&CHR(13)&CHR(10),"[W]13>Lenght Manually Cleared",2,200)
            SerialOut(SerialWinch,"Y"&Depth_for_Winch&CHR(13)&CHR(10),CHR(13),1,0)
            WinchMessage = "Winch Mission Started"
            Winch_Sampling = True
            Winch_Last_Sample = Buoy_TimeStamp_1990
            Winch_Date_Slash = Mid(GPS_Date,5,2)&"/"&Mid(GPS_Date,3,2)&"/"&Mid(GPS_Date,1,2)
            Winch_Date_Hyphen = UTC_Date_Hyphen
            Winch_Time_Short = UTC_Time_Short
            Winch_Time_DDot = UTC_Time_DDot
            Winch_Lat = Mid(Lat,1,2)&" "&Mid(Lat,3,5)&Lat_Hem
            Winch_Long = Mid(Lon,1,3)&" "&Mid(Lon,4,5)&Lon_Hem
          Else 'No string from CTD
            WinchMessage = "No String received from CTD"
          EndIf
        Else
          WinchMessage = "Winch already in function"
          Winch_Sampling = True
        EndIf
      EndIf
    
    Else If Winch_Sampling = True Then
      WhereAmI = "Check if the winch is done"
      
      SerialOpen(SerialWinch,19200,3,20,100)
      SerialFlush(SerialWinch)
      SerialIn(WinchString,SerialWinch,200,10,100)
      If WinchString = "" Then
        WhereAmI = "Collecting the winch"
        WinchFileName = Buoy_Name&"_"&Winch_Date_Hyphen&"_"&Winch_Time_Short
        WinchFile = FileOpen("CRD:WDATA_"&WinchFileName&".txt","a",-1)
        FileWrite(WinchFile,Winch_Time_DDot&" "&Winch_Date_Slash&CHR(10),0)
        FileWrite(WinchFile,Buoy_Name&CHR(10),0)     
        FileWrite(WinchFile,Winch_Lat&","&Winch_Long&CHR(10),0)    
        FileWrite(WinchFile,"D"&CHR(10),0)
        SerialOut(SerialWinch,"D"&CHR(13)&CHR(10),0,1,0)
        Do 
          WinchString = ""
          SerialIn(WinchString,SerialWinch,300,10,60)
          FileWrite(WinchFile,WinchString,0)
        Loop While WinchString <> ""
        
        WhereAmI = "Out of Do.. While Loop after winch"
        WinchString = ""
        FileClose(WinchFile)
        Winch_Sampling = False
        WinchMessage = "Winch Complete"
      Else
        WinchMessage = "Winch in Progress"
      EndIf
    
    Else
      WinchMessage = "Interval not reach"
    EndIf  
    
    TAGString = "[WNCH]" + WinchMessage
    Call WriteTagString
  EndIf

  'Close all serial port on CR6 if still open
  For SerialPort = 11 To 16 Step 1
    If SerialPort = 12 Then 'SerialADCP, always open
      'Do not close the port
    Else If SerialPort = 13 AND WinchMessage <> "Interval not reach" Then
      'Do not close the port
    Else
      SerialClose(SerialPort)
    EndIf
  Next SerialPort
      
  'Close all serial port on SDM4, except for PCO2 (40) which must stays on is PCO2 is sampling
  For SerialPort = 32 To 47 Step 1
    If SerialPort = 40 AND PCO2_Sampling = true Then
    'Do not close the port
    Else
      SerialClose(SerialPort)
    EndIf
  Next SerialPort
  
  CallTable Raw
  'CallTable SD
  
  If CO2_Water <> "#.#" AND CO2_Air <> "#.#" Then
    CO2_Water = "#.#"
    CO2_Air = "#.#"
  EndIf

  If RawPCO2_Air <> "" AND RawPCO2_Water <> "" Then
    RawPCO2_Air = ""
    RawPCO2_Water = ""
    RawPCO2 = ""
  EndIf
  
  TAGString = "[END]"
  Call WriteTagString
  
  TAGString = ""
  Call WriteTagString
  
  FileClose(TAGFile)
  FileClose(ToTransmit)
  
  WhereAmI = "Scan end"
  NextScan
	
  SlowSequence
    Scan(1,Sec,0,0)
      If Manual_Tower_Switch = true AND Tower_Switch = false Then
        SW12(SW12_1,1)
        Tower_Switch = true
      EndIf
        
      If Manual_Tower_Switch = false AND Tower_Switch = true Then
        SW12(SW12_1,0)
        Tower_Switch = false
      EndIf
      
      If Manual_Well_Switch = true AND Well_Switch = false Then
        SW12(SW12_2,1)
        Well_Switch = true
      EndIf
        
      If Manual_Well_Switch = false AND Well_Switch = true Then
        SW12(SW12_2,0)
        Well_Switch = false
      EndIf
      
      If Send_Break_to_ADCP = true Then
        SerialBrk(SerialADCP,200)
        Send_Break_to_ADCP = false
      EndIf
    NextScan
EndProg


Sub WriteTagString
  FileWrite(TAGFile,TAGString & CHR(10),0)
  FileWrite(ToTransmit,TAGString & CHR(10),0)
EndSub


Sub CloseCR6SerialPorts
  'Close all serial port on CR6 if still open except ADCP
  For SerialPort = 11 To 16 Step 1
    If SerialPort = SerialADCP Then
      'Do not close the ADCP port
    Else
      SerialClose(SerialPort)
    EndIf
  Next SerialPort
EndSub


Sub CloseSDM4SerialPorts
'Close all serial port on SDM4, except for PCO2 (40) which must stays on is PCO2 is sampling
  For SerialPort = 32 To 47 Step 1
    If SerialPort = SerialPCO2 AND PCO2_Sampling = true Then
    'Do not close the port
    Else
      SerialClose(SerialPort)
    EndIf
  Next SerialPort
EndSub


Sub StartADCP
  SerialOpen(SerialADCP,115200,3,0,3000)
EndSub


Sub StartWaterDetectionSensor
 '5V to the Water Detection sensor, sample taked at the end --------------------
  If With_WD_Main <> 0 Then
    PortSet(C4,1)
  EndIf
EndSub


Sub StartWeatherInstruments
' Weather instrument include WXT536, WMT700, OCR, Compas # FIXME MIssing WXT536 ?
  If With_PAR <> 0 OR With_WMT700 <> 0 OR With_Compass <> 0 OR With_OCR_I <> 0 Then  
      SW12(SW12_1,1)
      Tower_Switch = True
      Tower_Timer = Timer(7,Sec,0)
    EndIf
    
  'Open the RS485 port if there's one of the intruments
  If With_Tower <> 0 Then
    'Opening SDM and PAR (T5) voltage. 1sec before communication  
    SerialOpen(SerialTower,19200,51,20,500) 'for 2R! test
  EndIf
  
  'Open the PAR port if present, sending the data as soon as it's ready
  If With_PAR <> 0 Then
    SerialOpen(SerialPAR,19200,3,20,100)
  EndIf
EndSub


Sub CheckWaterDetection
  Water_Detection_Main = 0
  VoltSe(Water_Detection_Main,1,AutoRange,U1,0,0,15000,1,0)
  PortSet(C4,0)
EndSub


Sub StartWellPump
  'Open Switch #2 to control pump for X sec
  SW12(SW12_2,1)
  Well_Switch = True
  Timer(3,Sec,0) 'Start timer #3 for the pump working for min. 30 sec
EndSub


Sub CheckWellPump
  Well_Timer = Timer(3,Sec,4)
  Timer(3,Sec,3) 'Timer #3 Stop and Reset
  If Well_Timer < 30 Then
    Delay(1,30-Well_Timer,Sec)
  EndIf
EndSub


Sub CloseWellPump
  SW12(SW12_2,0)
  Well_Switch = False
EndSub