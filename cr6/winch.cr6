'Winch related code
Const SuccesfulWinchMessage = "Winch was sampled successfully" ' TODO CHANGE TO THE CORRECT VALUE
Const WinchMaxFileLength = 100000 ' Maximum number of lines of a file (Safety)  TODO CHANGE TO THE CORRECT VALUE
Public WinchString As String * 50
' The actual maximum size of the file in bytes would be WinchMaxFileLength * Length(WinchString) of the winch file in bytes.
' At the moment the max file size is 500 Kbs (1 000 000 * 50).


Public Winch_Conditions_ByPass As Boolean = false

Const Min_Air_Temp_for_Winch = 1
Const Max_Wave_H13_for_Winch = 2
Const Min_Wave_Period_for_Winch = 6
Const Max_Flow_for_Winch = 1
Const Max_Buoy_Speed_for_Winch = 1
Const Min_Voltage_for_Winch = 12.2

Public OnWhichBattery
Public Winch_Voltage As Float = ""

Public WinchStatus As String * 10 = "Standby" 'Standby / Sampling / Completed
Public WinchMessage As String * 50
Public WinchMissingConditions As Long = 0


Public WinchFileName As String * 50
Dim WinchFileHandle As Long


Public Winch_Last_Sample AS Long = ""
Public Winch_DateTime(2) As String : Alias Winch_DateTime = Winch_Date, Winch_Time  
Public Winch_Latitude As String
Public Winch_Longitude As String

' ####################### Start Conditions ############################## 
Sub WinchAirCheck(Air_Temp)
    If Air_Temp < Min_Air_Temp_for_Winch Then
        WinchMessage = "The air temperature is too cold."
        Call logging("Winch : " & WinchMessage)
        WinchMissingConditions += 1
    EndIf
EndSub

Sub WinchWaveCheck(Wave_H13, Wave_Period)
    If Wave_H13 > Max_Wave_H13_for_Winch Then
        WinchMessage = "Average wave is too high."
        Call logging("Winch : " & WinchMessage)
        WinchMissingConditions += 1
    EndIf
        
    If Wave_H13 > 1 AND Wave_Period < Min_Wave_Period_for_Winch  AND Wave_Period <> 0 Then 
        WinchMessage = "Wave period is too short. "
        WinchMissingConditions += 1
    EndIf
EndSub

Sub WinchGPSCheck(SOG)
    If SOG > Max_Buoy_Speed_for_Winch Then
        WinchMessage = "The buoy is moving too fast."
        Call logging("Winch : " & WinchMessage)
        WinchMissingConditions += 1
    EndIf
EndSub

Sub WinchPowerCheck(VBatt1, VBatt2)
    OnWhichBattery = Mid(Power(11),4,1)
    If OnWhichBattery = 1 Then
        Winch_Voltage = VBatt1
    ElseIf OnWhichBattery = 2 Then
        Winch_Voltage = VBatt2
    EndIf
    
    If Winch_Voltage < Min_Voltage_for_Winch Then
        WinchMessage = "The Winch voltage is too low."
        Call logging("Winch : " & WinchMessage)
        WinchMissingConditions += 1
    EndIf
EndSub

Sub WinchConditionsCheck
    WinchMissingConditions = 0
    
    If NOT Winch_Conditions_ByPass Then
        Call logging("Winch Conditions Check ByPassed")
        ExitSub
    EndIf

    Call logging("Winch Condition Checks")
    If With_WXT536 Then
      Call WinchAirCheck(Air_Temp)
    EndIf
    
    If With_Wave Then
      Call WinchWaveCheck(Wave_H13, Wave_Period) 
    EndIf
          
    If With_GPS Then
      Call WinchGPSCheck(SOG)
    EndIf
    
    If With_Power Then
      Call WinchPowerCheck(VBatt1, VBatt2)
    EndIf
EndSub

' ####################### Winch Mission Start ############################## 
Sub CheckWinchStatus 
    SerialOpen(SerialWinch,19200,3,20,100) 
    SerialFlush(SerialWinch)
    Delay(1,500,mSec)
    SerialIn(WinchString,SerialWinch,100,10,60)

    If WinchString = "" Then
        If WinchStatus = "Sampling"
            WinchStatus = "Completed"
            WinchMessage = "Winch Completed"
        Else
            WinchMessage = "No Winch in Progress"
        EndIf
    Else
        WinchMessage = "Winch in Progress"
    EndIf
    Call logging("Winch Status: " & Winch Status)
EndSub

Sub StartWinch
    Call logging("Startig Winch Mission")    

    SerialOpen(SerialWinch,19200,3,20,100)
    SerialOut(SerialWinch,CHR(13),"",1,0)
    SerialOut(SerialWinch,"p1"&CHR(13)&CHR(10),.,2,300)
    Delay(1,2,Sec)
    SerialFlush(SerialWinch)
    SerialIn(WinchString,SerialWinch,100,10,100)
    SerialOut(SerialWinch,"p0"&CHR(13)&CHR(10),.,2,300)

    If Mid(WinchString,1,3) = "[S]" Then 'If [S] is received from CTD -> winch has started
        Call logging("Winch Mission was Started")
        SerialOut(SerialWinch,"X"&CHR(13)&CHR(10),"[W]1B>Operation Complete",2,200)
        SerialOut(SerialWinch,"R"&CHR(13)&CHR(10),"[W]09>Top Switch Activated",3,1000)
        SerialOut(SerialWinch,"K"&CHR(13)&CHR(10),"[W]13>Lenght Manually Cleared",2,200)
        SerialOut(SerialWinch,"Y"&Depth_for_Winch&CHR(13)&CHR(10),CHR(13),1,0)
        
        WinchStatus = "Sampling"
        
        If Start_Winch_Override Then
            'Updating GPS Values for Winch TimeStamp
            Call logging("Sampling GPS for Winch Manual Override")
            Call StartGPS              
            Call CollectGPS(true) ' single_sample = true
            SerialClose(SerialGPS)
        Else
            ' The next winch is still scheduled isn't changed if Start_Winch_Override is True.
            Winch_Last_Sample = Public.TimeStamp(1)
        EndIf

        SplitStr(Winch_DateTime, Public.TimeStamp(4), " ", 2, 5)
        Winch_Latitude = Latitude
        Winch_Longitude = Longitude

        WinchMessage = "Winch Mission Started"
    Else 'No string from CTD
        WinchMessage = "No String received from CTD"
        Call logging("WINCH FAILED. Winch Start Confirmation not received.")
    EndIf
    
    Call logging("Winch Status: " & WinchStatus)
EndSub

Sub WinchRoutine
    'Start a Winch Mission if its not Ongoing and possible.
    If With_Winch AND (SBE37_In_Saltwater OR Bypass_Salinity) Then
        Call logging("Entering Winch Routine")
        
        If ((Winch_Last_Sample + Winch_Interval_Hr * 3600 - 60) > Public.TimeStamp(1)) AND NOT Start_Winch_Override Then
            ' Skipped if Start_Winch_Override is True.
            ' minus 60sec to not skip a scan planned at Winch_Interval hour (got 3599s and didn't sampled)
            WinchMessage = "Interval not reach"
            TAGString &= "[WNCH]" + WinchMessage
            Call logging("Winch: " & WinchMessage)
            ExitSub
        EndIf
        
        Call CheckWinchStatus

        If WinchStatus = "Standby" Then

            Call WinchConditionsCheck

            If WinchMissingConditions <> 0 Then
                Call StartWinch
            Else
                Call logging("Winch Number of Missing Conditions: " & WinchMissingConditions)
            EndIf  
        EndIf
        
        If NOT Start_Winch_Override Then
            ' Skipped if Start_Winch_Override is True.
            TAGString &= "[WNCH]" + WinchMessage
        EndIf
    Else
        Call logging("Winch Routine Skipped to too low salinity.")
    EndIf
EndSub

' ####################### Collecting Data ############################## 

Sub InitWinchFile
    WinchFileName = "WDATA_"& Buoy_Name &"_"& Replace(Winch_Date, "-", "") &"_"& Replace(Winch_Time, ":", "")
    WinchFileHandle = FileOpen("CRD:"&WinchFileName&".txt","a",-1)

    FileWrite(WinchFileHandle,Winch_Time&" "&Winch_Date&CHR(10),0)
    FileWrite(WinchFileHandle,Buoy_Name&CHR(10),0)     
    FileWrite(WinchFileHandle,Winch_Latitude&","&Winch_Longitude&CHR(10),0)    
    FileWrite(WinchFileHandle,"D"&CHR(10),0)

    FileClose(WinchFileHandle)
    
    Call logging("Winch File Created -> " &WinchFileName)
EndSub


Sub DownloadWinchData
    Dim X
    Dim Winch_Sampling_Failed As Boolean = True

    Call logging("Downloadig Winch Data")

    Winch_Sampling_Failed = True

    SerialOpen(SerialWinch,19200,3,20,100) 'Should it be started earlier ??
    SerialFlush(SerialWinch)
    SerialOut(SerialWinch,"D"&CHR(13)&CHR(10),0,1,0)
    
    WinchFileHandle = FileOpen("CRD:WDATA_"&WinchFileName&".txt","a",-1)
        
    For X = 1 To WinchMaxFileLength Step 1
        WinchString = ""
        SerialIn(WinchString,SerialWinch,300,10,60)
        
        If WinchString = SuccesfulWinchMessage Then
            Winch_Sampling_Failed = False
        ElseIf WinchString = "" Then
            ExitFor
        EndIf

        FileWrite(WinchFileHandle,WinchString,0)
    Next

    SerialClose(SerialWinch)
    FileClose(WinchFileHandle)

    Call logging("Winch Data Download Done")

    If Winch_Sampling_Failed Then
        Call Set_Winch_Failed_Warning
        Call logging("Winch Sampling Failed")
    EndIf

    If WinchString <> "" Then
        Call Set_Winch_Download_TimedOut_Warning
        Call logging("Winch Download Timed Out")
        WinchString = ""
    EndIf
EndSub


Sub CollectWinch
    Call CheckWinchStatus
    
    If WinchStatus = "Completed" Then
        Call logging("Collecting Winch")
        WinchStatus = "Standby"
        
        Call InitWinchFile
        
        Call DownloadWinchData
    EndIf
EndSub
