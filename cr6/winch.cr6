' Winch related code
'
' Winch Communication
' Start a Winch: 
'    Command: Format: w<Date><Time><Latitude><Longitude>\r
'       `wyyyymmddHHMMSSDDMMmmmDDDMMmmm\r`
'    Returns:
'       `\n` + `<winch_file>.txt\n`
' Download Winch file:
'   Command:
'        `Read <winch_file>.txt\r`
'   Returns: All line ends with a new line \n)
'    ```
'   Reading file '<winch_file>.txt'
'    ---
'    <data>
'    <SuccesfullWinchMessage> 
'    ---
'    ```

Const SuccesfulWinchMessage = "CTD in the dock" ' TODO CHANGE TO THE CORRECT VALUE
Const WinchMaxFileLength = 100000 ' Maximum number of lines of a file (Safety)  TODO CHANGE TO THE CORRECT VALUE
Public WinchString As String * 30
' The actual maximum size of the file in bytes would be WinchMaxFileLength * Length(WinchString) of the winch file in bytes.
' At the moment the max file size is 500 Kbs (1 000 000 * 50).


Public Winch_Conditions_ByPass As Boolean = false

' Whinch constant were moved to buod_config.CR6
' Const Min_Air_Temp_for_Winch = 1
' Const Max_Wave_H13_for_Winch = 2
' Const Min_Wave_Period_for_Winch = 6
' Const Max_Flow_for_Winch = 1
' Const Max_Buoy_Speed_for_Winch = 1
' Const Min_Voltage_for_Winch = 12.2

Public OnWhichBattery As Long = ""
Public Winch_Voltage As Float = ""

Public WinchStatus As String * 10 = "Standby" 'Standby / Sampling / Completed
Public WinchMessage As String * 50
Public WinchMissingConditions As Long = 0


Public WinchFileName As String * 50
Dim Winch_Internal_File as String * 50 ' Probably too long
Dim WinchFileHandle As Long


Public Winch_Last_Sample AS Long = ""
Public winch_start_command as String * 30
' These could be Dims.
Public Winch_DateTime(2) As String : Alias Winch_DateTime = Winch_Date, Winch_Time  
Public Winch_Latitude As String
Public Winch_Longitude As String

' ####################### Start Conditions ############################## 
Sub WinchAirCheck(Air_Temp)
    If Air_Temp < Min_Air_Temp_for_Winch Then
        WinchMessage = "Air temperature is too low"
        Call logging("Winch : " & WinchMessage)
        WinchMissingConditions += 1
    EndIf
EndSub

Sub WinchWaveCheck(WaveH13, WavePeriod)
    If WaveH13 > Max_Wave_H13_for_Winch Then
        WinchMessage = "Waves are too high"
        Call logging("Winch : " & WinchMessage)
        WinchMissingConditions += 1
    EndIf
        
    If WaveH13 > 1 AND WavePeriod < Min_Wave_Period_for_Winch  AND WavePeriod <> 0 Then 
        WinchMessage = "Wave period is too short"
        WinchMissingConditions += 1
    EndIf
EndSub

Sub WinchGPSCheck(SOG)
    If SOG > Max_Buoy_Speed_for_Winch Then
        WinchMessage = "Buoy is moving too fast"
        Call logging("Winch : " & WinchMessage)
        WinchMissingConditions += 1
    EndIf
EndSub

Sub WinchPowerCheck(VBatt1, VBatt2)
    OnWhichBattery = Mid(Power(11),4,1)
    If OnWhichBattery = 1 Then
        Winch_Voltage = VBatt1
    ElseIf OnWhichBattery = 2 Then
        Winch_Voltage = VBatt2
    EndIf
    
    If Winch_Voltage < Min_Voltage_for_Winch Then
        WinchMessage = "Voltage is too low"
        Call logging("Winch : " & WinchMessage)
        WinchMissingConditions += 1
    EndIf
EndSub

Function make_winch_start_command(_latitude_ as String, _longitude_ as String) as String * 30
    ' Winch Start String: wyyyymmddHHMMSSDDMMmmmDDDMMmmm
    '                     w<Date><Time><Latitude><Longitude>
    ' Variables format
    ' _latitude_ : DDMM.mmmmm
    '  _longitude_ : DDDMM.mmmm
    SplitStr(Winch_DateTime, Public.TimeStamp(4), " ", 2, 5)
    Winch_Date = Replace(Winch_Date, "-", "")                  ' -> yyyymmdd 
    Winch_Time = Replace(Mid(Winch_Time, 1, 8), ":", "")       ' -> HHMMSS 
    Winch_Latitude = Mid(Replace(_latitude_, ".", ""), 1, 7)   ' -> DDMMmmm
    Winch_Longitude = Mid(Replace(_longitude_, ".", ""), 1, 8) ' -> DDDMMmmm
    return "w" & Winch_Date & Winch_Time & Winch_Latitude & Winch_Longitude
EndFunction



Sub WinchConditionsCheck
    WinchMissingConditions = 0
    
    If Winch_Conditions_ByPass Then
        Call logging("Winch Conditions Check ByPassed")
        ExitSub
    EndIf

    Call logging("Winch Condition Checks")
    
    If With_WXT536 Then
      Call WinchAirCheck(Air_Temp)
    EndIf
    
    If With_Wave Then
      Call WinchWaveCheck(WaveH13, WavePeriod) 
    EndIf
          
    If With_GPS Then
      Call WinchGPSCheck(SOG)
    EndIf
    
    If With_Power Then
      Call WinchPowerCheck(VBatt1, VBatt2)
    EndIf
EndSub

' ####################### Winch Mission Start ############################## 
Sub CheckWinchStatus 
    SerialOpen(SerialWinch,115200,3,20,100) 
    SerialFlush(SerialWinch)
    Delay(1,500,mSec)
    SerialIn(WinchString,SerialWinch,100,10,60)

    If WinchString = "" Then
        If WinchStatus = "Sampling"
            WinchStatus = "Completed"
            WinchMessage = "Mission Completed"
        Else
            WinchMessage = "No Mission in Progress"
        EndIf
    Else
        WinchMessage = "Mission in Progress"
    EndIf
    Call logging("Winch Status: " & WinchStatus)
EndSub

Sub StartWinch
    Dim X
    If Buoy_Adrift_Alert Then
        Call logging("Buoy Adrift Alert is ON. Winch Disabled.")
        ExitSub
    EndIf
    
    Call logging("Startig Winch Mission")    
    
    If Start_Winch_Override Then
        'Updating GPS Values for Winch TimeStamp
        Call GetGpsPosition ' sets public var: `latitude_tmp`, `longitude_tmp`.
        winch_start_command = make_winch_start_command(latitude_tmp, longitude_tmp)
    Else
        ' The next scheduled winch time is only changed when its a scheduled winch.
        Winch_Last_Sample = Public.TimeStamp(1)
        winch_start_command = make_winch_start_command(GPS_Lat, GPS_Lon)
    EndIf
    
    Call logging("Winch Start Command: " & winch_start_command)
    
    SerialOpen(SerialWinch,115200,3,20,100)
    SerialOut(SerialWinch, CHR(13),CHR(10),1, 0)  ' Wakeup the winch.
    ' Winch expect a carriage return (char(13)) at the end of a command.
    
    SerialOut(SerialWinch, winch_start_command & CHR(13), "",1,0) ' will echo

    For X = 1 to 10
        SerialIn(WinchString,SerialWinch,200,10,200)
        Call logging("WinchString Attempt " & X & ": " & WinchString)
        If InStr(1, WinchString,"txt",2)  <> 0 Then
            Winch_Internal_File = WinchString
            Call logging("Winch Mission was Started. Winch File: " &  Winch_Internal_File)
            WinchStatus = "Sampling"
            WinchMessage = "Mission Started"
            ExitFor
        ElseIf InStr(1, WinchString,"Invalid command.",2) <> 0 Then
            Call logging("Invalid Winch Command.")
            ExitFor
        EndIf
    Next

    If X == 10 Then
        Call logging("WINCH FAILED. No answer from Winch.")
    EndIf
    
    Call logging("Winch Status: " & WinchStatus)
EndSub

Sub WinchRoutine
    'Start a Winch Mission if its not Ongoing and possible.
    If With_Winch 
        If (SBE37_In_Saltwater OR Bypass_Salinity) Then
            Call logging("Entering Winch Routine")
            
            If ((Winch_Last_Sample + Winch_Interval_Hr * 3600 - 60) > Public.TimeStamp(1)) AND NOT Start_Winch_Override Then
                ' Skipped if Start_Winch_Override is True.
                ' minus 60sec to not skip a scan planned at Winch_Interval hour (got 3599s and didn't sampled)
                WinchMessage = "Interval not reach"
                TAGString &= "[WNCH]" + WinchMessage
                Call logging("Winch: " & WinchMessage)
                ExitSub
            EndIf
            
            Call CheckWinchStatus

            If WinchStatus = "Standby" Then

                Call WinchConditionsCheck

                If WinchMissingConditions = 0 Then
                    Call StartWinch
                Else
                    Call logging("Winch Number of Missing Conditions: " & WinchMissingConditions)
                EndIf  
            EndIf
            
            If NOT Start_Winch_Override Then
                ' Skipped if Start_Winch_Override is True.
                TAGString &= "[WNCH]" + WinchMessage
            EndIf
        Else
            Call logging("Winch Routine Skipped due to low salinity.")
        EndIf
    EndIf
EndSub

' ####################### Collecting Data ##############################

' Sub InitWinchFile
'     WinchFileName = "WDATA_"& Buoy_Name &"_"& Replace(Winch_Date, "-", "") &"_"& Replace(Winch_Time, ":", "")
'     WinchFileHandle = FileOpen("CRD:"&WinchFileName&".txt","a",-1)

    ' FileWrite(WinchFileHandle,Winch_Time&" "&Winch_Date&CHR(10),0)
    ' FileWrite(WinchFileHandle,Buoy_Name&CHR(10),0)     
    ' FileWrite(WinchFileHandle,Winch_Latitude&","&Winch_Longitude&CHR(10),0)    
    ' FileWrite(WinchFileHandle,"D"&CHR(10),0)

'     FileClose(WinchFileHandle)
    
'     Call logging("Winch File Created -> " &WinchFileName)
' EndSub


Sub DownloadWinchData
    Dim X
    Dim Winch_Sampling_Failed As Boolean = True

    Call logging("Downloadig Winch Data")

    Winch_Sampling_Failed = True

    SerialOpen(SerialWinch,115200,3,20,100) 'Should it be started earlier ??
    SerialFlush(SerialWinch)
    SerialOut(SerialWinch,"read " & Winch_Internal_File&CHR(13)&CHR(10),0,1,0)
    
    WinchFileName = "WDATA_"& Buoy_Name &"_"& Winch_Date & Winch_Time
    WinchFileHandle = FileOpen("CRD:WDATA_"&WinchFileName&".txt","a",-1)
    
    ' Returns:
    '   ```
    '   Reading file '<winch_file>.txt'
    '    ---
    '    <data>
    '    <SuccesfullWinchMessage> 
    '    ---
    '    ```
    ' 
    SerialIn(WinchString,SerialWinch,300,10,60) '`Reading file '<winch_file>.txt\n`'
    Call logging(WinchString)
    SerialIn(WinchString,SerialWinch,300,10,60)
    
    If WinchString = "---" Then
        Do While  x < WinchMaxFileLength
            ' WinchString = "" ' Probably not nescesary
            x+=1
            SerialIn(WinchString,SerialWinch,300,10,60)
        
            If WinchString = SuccesfulWinchMessage Then
                FileWrite(WinchFileHandle,WinchString,0) ' -> yyyymmdd 
                Winch_Sampling_Failed = False
            EndIf
            
            If WinchString = "" or WinchString = "---" Then 'End of file reached'
                ExitDo
            EndIf
            
            FileWrite(WinchFileHandle,WinchString,0)
        Loop
    EndIf

    SerialClose(SerialWinch)
    FileClose(WinchFileHandle)

    Call logging("Winch Data Downloaded -> " &WinchFileName)

    Call logging("Winch Last Line: " & WinchString)

    If Winch_Sampling_Failed Then
        Call Set_Winch_Failed_Warning
        Call logging("Winch Sampling Failed")
    EndIf

    If WinchString <> "" Then
        Call Set_Winch_Download_TimedOut_Warning
        Call logging("Winch Download Timed Out")
        WinchString = ""
    EndIf
EndSub


Sub CollectWinch
    Call CheckWinchStatus
    
    If WinchStatus = "Completed" Then
        Call logging("Collecting Winch")
        WinchStatus = "Standby"
                
        Call DownloadWinchData
    EndIf
EndSub
